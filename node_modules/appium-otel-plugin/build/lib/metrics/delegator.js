"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsDelegator = void 0;

const {
  Delegator
} = require('../appium');

const {
  log
} = require('../logger');

const {
  Collector
} = require('./collector.js');

class MetricsDelegator extends Delegator {
  constructor(collector) {
    super();
    this.collector = collector;
    this.caps = null;
  }

  async delegateCreateSession(next, driver, jwpDesCaps, jwpReqCaps, cap) {
    if (driver && driver.constructor.name === 'AppiumDriver') {
      this.collector.putAppiumDriver(driver);
    }

    return await next().then(res => {
      if (!res || !res.value || res.value.length < 2) {
        log.info('skip saving session id');
        return res;
      }

      const sessionId = res.value[0];
      this.caps = res.value[1];
      this.collector.onCreateSession(sessionId, this.caps);
      this.collector.countCommandResponsesSuccess('createSession', this.caps);
      return res;
    }).catch(err => {
      this.collector.countCommandResponsesError('createSession', this.caps);
      throw err;
    });
  }

  async collectCommandMetrics(next, cmdName) {
    return await next().then(res => {
      this.collector.countCommandResponsesSuccess(cmdName, this.caps);
      return res;
    }).catch(err => {
      this.collector.countCommandResponsesError(cmdName, this.caps);
      throw err;
    });
  }

  async delegateDeleteSession(next, driver, sessionId) {
    return await this.collectCommandMetrics(next, 'deleteSession').then(res => {
      this.collector.onDeleteSession(sessionId, this.caps);
      return res;
    });
  }

  async delegateHandle(next, driver, cmdName, ...args) {
    return await this.collectCommandMetrics(next, cmdName);
  }

}

exports.MetricsDelegator = MetricsDelegator;