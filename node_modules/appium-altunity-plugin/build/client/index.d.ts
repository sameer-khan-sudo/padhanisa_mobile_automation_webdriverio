import { getServerVersion, findObject, findObjects, findAllObjects, getCurrentHierarchy, getHierarchy, getCurrentScene, loadScene, getTimeScale, setTimeScale, getScreenshotAsB64, getScreenshotAsPNG, keyDown, keyUp, isActionFinished, waitTillActionFinished, pressKey, tapCoordinates, tapElement, clickElement, getElementText, getElementComponents, getComponentProperty, setComponentProperty, Position } from './commands';
import { AltBy } from './by';
import { AltKeyCode } from './key-code';
import { AltElement } from './alt-element';
import { Connection, CommandParameters } from './connection';
declare const DEFAULT_ALTUNITY_HOST = "127.0.0.1";
declare const DEFAULT_ALTUNITY_PORT = 13000;
export declare const DEFAULT_VALIDATION_STR = "Ok";
type ClientOpts = {
    host?: string;
    port?: number;
    log: any;
};
export declare class AltUnityError extends Error {
    type: string;
    trace: string;
    constructor(type: string, message: string, trace: string);
}
export default class AltUnityClient {
    host: string;
    port: number;
    serverVersion?: string;
    cameraBy: AltBy;
    cameraPath: string;
    protected conn: Connection;
    protected log?: any;
    getServerVersion: typeof getServerVersion;
    getScreenshotAsPNG: typeof getScreenshotAsPNG;
    getScreenshotAsB64: typeof getScreenshotAsB64;
    getCurrentScene: typeof getCurrentScene;
    loadScene: typeof loadScene;
    getTimeScale: typeof getTimeScale;
    setTimeScale: typeof setTimeScale;
    findObject: typeof findObject;
    findObjects: typeof findObjects;
    findAllObjects: typeof findAllObjects;
    getCurrentHierarchy: typeof getCurrentHierarchy;
    getHierarchy: typeof getHierarchy;
    keyDown: typeof keyDown;
    keyUp: typeof keyUp;
    pressKey: typeof pressKey;
    isActionFinished: typeof isActionFinished;
    waitTillActionFinished: typeof waitTillActionFinished;
    tapCoordinates: typeof tapCoordinates;
    tapElement: typeof tapElement;
    clickElement: typeof clickElement;
    getElementText: typeof getElementText;
    getElementComponents: typeof getElementComponents;
    getComponentProperty: typeof getComponentProperty;
    setComponentProperty: typeof setComponentProperty;
    constructor(opts: ClientOpts);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    _sendCommand(commandName: string, data?: CommandParameters, responseCount?: number, validations?: string[]): Promise<any[]>;
    sendSimpleCommand(commandName: string, data?: CommandParameters): Promise<any>;
    sendTwoPartCommand(commandName: string, data?: CommandParameters, validations?: string[]): Promise<any>;
}
export { AltUnityClient, AltBy, AltElement, AltKeyCode, Position, DEFAULT_ALTUNITY_HOST, DEFAULT_ALTUNITY_PORT, };
