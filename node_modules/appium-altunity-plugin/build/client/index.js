"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ALTUNITY_PORT = exports.DEFAULT_ALTUNITY_HOST = exports.AltKeyCode = exports.AltElement = exports.AltBy = exports.AltUnityClient = exports.AltUnityError = exports.DEFAULT_VALIDATION_STR = void 0;
const commands_1 = require("./commands");
const by_1 = require("./by");
Object.defineProperty(exports, "AltBy", { enumerable: true, get: function () { return by_1.AltBy; } });
const key_code_1 = require("./key-code");
Object.defineProperty(exports, "AltKeyCode", { enumerable: true, get: function () { return key_code_1.AltKeyCode; } });
const alt_element_1 = require("./alt-element");
Object.defineProperty(exports, "AltElement", { enumerable: true, get: function () { return alt_element_1.AltElement; } });
const connection_1 = require("./connection");
const asyncbox_1 = require("asyncbox");
const DEFAULT_ALTUNITY_HOST = '127.0.0.1';
exports.DEFAULT_ALTUNITY_HOST = DEFAULT_ALTUNITY_HOST;
const DEFAULT_ALTUNITY_PORT = 13000;
exports.DEFAULT_ALTUNITY_PORT = DEFAULT_ALTUNITY_PORT;
exports.DEFAULT_VALIDATION_STR = 'Ok';
var ResponseEncoding;
(function (ResponseEncoding) {
    ResponseEncoding["START"] = "altstart::";
    ResponseEncoding["RESPONSE"] = "::response::";
    ResponseEncoding["LOG"] = "::altLog::";
    ResponseEncoding["END"] = "::altend";
})(ResponseEncoding || (ResponseEncoding = {}));
var RequestEncoding;
(function (RequestEncoding) {
    RequestEncoding["SEPARATOR"] = ";";
    RequestEncoding["END"] = "&";
})(RequestEncoding || (RequestEncoding = {}));
class AltUnityError extends Error {
    constructor(type, message, trace) {
        super(message);
        this.type = type;
        this.trace = trace;
    }
}
exports.AltUnityError = AltUnityError;
class AltUnityClient {
    constructor(opts) {
        // general commands
        this.getServerVersion = commands_1.getServerVersion;
        this.getScreenshotAsPNG = commands_1.getScreenshotAsPNG;
        this.getScreenshotAsB64 = commands_1.getScreenshotAsB64;
        this.getCurrentScene = commands_1.getCurrentScene;
        this.loadScene = commands_1.loadScene;
        this.getTimeScale = commands_1.getTimeScale;
        this.setTimeScale = commands_1.setTimeScale;
        // find commands
        this.findObject = commands_1.findObject;
        this.findObjects = commands_1.findObjects;
        this.findAllObjects = commands_1.findAllObjects;
        this.getCurrentHierarchy = commands_1.getCurrentHierarchy;
        this.getHierarchy = commands_1.getHierarchy;
        // action commands
        this.keyDown = commands_1.keyDown;
        this.keyUp = commands_1.keyUp;
        this.pressKey = commands_1.pressKey;
        this.isActionFinished = commands_1.isActionFinished;
        this.waitTillActionFinished = commands_1.waitTillActionFinished;
        this.tapCoordinates = commands_1.tapCoordinates;
        this.tapElement = commands_1.tapElement;
        this.clickElement = commands_1.clickElement;
        // element commands
        this.getElementText = commands_1.getElementText;
        this.getElementComponents = commands_1.getElementComponents;
        // component commands
        this.getComponentProperty = commands_1.getComponentProperty;
        this.setComponentProperty = commands_1.setComponentProperty;
        if (!opts.host) {
            opts.host = DEFAULT_ALTUNITY_HOST;
        }
        if (!opts.port) {
            opts.port = DEFAULT_ALTUNITY_PORT;
        }
        this.host = opts.host;
        this.port = opts.port;
        this.conn = new connection_1.Connection({
            log: opts.log,
            port: opts.port,
            host: opts.host
        });
        this.log = opts.log;
        this.cameraBy = by_1.AltBy.NAME;
        this.cameraPath = ''; // default camera path is empty
    }
    async connect() {
        let numTries = 0;
        const maxTries = 15;
        await (0, asyncbox_1.retryInterval)(maxTries, 1000, async () => {
            numTries++;
            this.log.info(`Attempting to connect to AltUnity server. This is attempt ${numTries}/${maxTries}`);
            try {
                await this.conn.connect();
            }
            catch (err) {
                throw new Error(`Could not connect to the AltUnity server. Original error was: ${err.message}`);
            }
        });
        this.log.info(`Connection to AltUnity server established`);
    }
    async disconnect() {
        await this.conn.close();
    }
    async _sendCommand(commandName, data, responseCount = 1, validations = []) {
        const curMsgId = Date.now();
        const message = { ...data, commandName, messageId: curMsgId.toString() };
        const responses = await this.conn.sendMessage(message, responseCount, validations);
        for (const res of responses) {
            if (res.error) {
                throw new AltUnityError(res.error.type, res.error.message, res.error.trace);
            }
        }
        return responses.map((r) => r.data);
    }
    async sendSimpleCommand(commandName, data) {
        const datas = await this._sendCommand(commandName, data, 1);
        return datas[0];
    }
    async sendTwoPartCommand(commandName, data, validations = [exports.DEFAULT_VALIDATION_STR]) {
        const datas = await this._sendCommand(commandName, data, 2, validations);
        return datas[1];
    }
}
exports.default = AltUnityClient;
exports.AltUnityClient = AltUnityClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQTBCbUI7QUFDbkIsNkJBQTRCO0FBNEp4QixzRkE1SkssVUFBSyxPQTRKTDtBQTNKVCx5Q0FBdUM7QUE2Sm5DLDJGQTdKSyxxQkFBVSxPQTZKTDtBQTVKZCwrQ0FBMEM7QUEySnRDLDJGQTNKSyx3QkFBVSxPQTJKTDtBQTFKZCw2Q0FBNEQ7QUFDNUQsdUNBQXdDO0FBRXhDLE1BQU0scUJBQXFCLEdBQUcsV0FBVyxDQUFBO0FBMEpyQyxzREFBcUI7QUF6SnpCLE1BQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFBO0FBMEovQixzREFBcUI7QUF4SlosUUFBQSxzQkFBc0IsR0FBRyxJQUFJLENBQUE7QUFFMUMsSUFBSyxnQkFLSjtBQUxELFdBQUssZ0JBQWdCO0lBQ2pCLHdDQUFvQixDQUFBO0lBQ3BCLDZDQUF5QixDQUFBO0lBQ3pCLHNDQUFrQixDQUFBO0lBQ2xCLG9DQUFnQixDQUFBO0FBQ3BCLENBQUMsRUFMSSxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBS3BCO0FBRUQsSUFBSyxlQUdKO0FBSEQsV0FBSyxlQUFlO0lBQ2hCLGtDQUFlLENBQUE7SUFDZiw0QkFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhJLGVBQWUsS0FBZixlQUFlLFFBR25CO0FBYUQsTUFBYSxhQUFjLFNBQVEsS0FBSztJQUlwQyxZQUFZLElBQVksRUFBRSxPQUFlLEVBQUUsS0FBYTtRQUNwRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0NBQ0o7QUFURCxzQ0FTQztBQUVELE1BQXFCLGNBQWM7SUE2Qy9CLFlBQVksSUFBZ0I7UUFsQzVCLG1CQUFtQjtRQUNuQixxQkFBZ0IsR0FBRywy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