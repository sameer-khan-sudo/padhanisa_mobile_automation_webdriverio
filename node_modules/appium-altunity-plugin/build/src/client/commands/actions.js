"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clickElement = exports.tapElement = exports.tapCoordinates = exports.pressKey = exports.waitTillActionFinished = exports.isActionFinished = exports.keyUp = exports.keyDown = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const __1 = require("..");
const DEFAULT_TAP_COUNT = 1;
const DEFAULT_TAP_INTERVAL_MS = 250;
const WAIT_VALIDATIONS = [__1.DEFAULT_VALIDATION_STR, 'Finished'];
async function keyDown(keyCode, power = 1) {
    return await this.sendSimpleCommand('keyDown', { keyCode, power });
}
exports.keyDown = keyDown;
async function keyUp(keyCode) {
    return await this.sendSimpleCommand('keyUp', { keyCode });
}
exports.keyUp = keyUp;
async function isActionFinished() {
    const res = await this.sendSimpleCommand('actionFinished');
    return res === 'Yes';
}
exports.isActionFinished = isActionFinished;
async function waitTillActionFinished(durationMsHint) {
    await bluebird_1.default.delay(durationMsHint);
    const interval = 300;
    while (!await this.isActionFinished()) {
        await bluebird_1.default.delay(interval);
    }
}
exports.waitTillActionFinished = waitTillActionFinished;
async function pressKey(keyCode, durationMs, power = 1) {
    const durationSecs = durationMs / 1000;
    await this.sendTwoPartCommand('pressKeyboardKey', {
        keyCode,
        power,
        duration: durationSecs,
        wait: true,
    }, WAIT_VALIDATIONS);
}
exports.pressKey = pressKey;
function getTapData(args, wait, element) {
    args.count ?? (args.count = DEFAULT_TAP_COUNT);
    args.intervalMs ?? (args.intervalMs = DEFAULT_TAP_INTERVAL_MS);
    const intervalSecs = args.intervalMs / 1000;
    const data = {
        coordinates: args.pos,
        count: args.count,
        interval: intervalSecs,
        wait,
    };
    if (element) {
        data.altUnityObject = element.asUnityObject();
    }
    return data;
}
async function tapCoordinates(args, wait = true) {
    if (!args.pos) {
        throw new Error('Position is required for tap');
    }
    const data = getTapData(args, wait);
    if (wait) {
        return await this.sendTwoPartCommand('tapCoordinates', data, WAIT_VALIDATIONS);
    }
    return await this.sendSimpleCommand('tapCoordinates', data);
}
exports.tapCoordinates = tapCoordinates;
async function tapElement(element, args, wait = true, cmdName = 'tapElement') {
    const data = getTapData(args, wait, element);
    if (wait) {
        return await this.sendTwoPartCommand(cmdName, data, WAIT_VALIDATIONS);
    }
    return await this.sendSimpleCommand(cmdName, data);
}
exports.tapElement = tapElement;
async function clickElement(element, args, wait = true) {
    return await this.tapElement(element, args, wait, 'clickElement');
}
exports.clickElement = clickElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvY29tbWFuZHMvYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3REFBd0I7QUFDeEIsMEJBQTJEO0FBSzNELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFBO0FBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQywwQkFBc0IsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQWF0RCxLQUFLLFVBQVUsT0FBTyxDQUF1QixPQUFtQixFQUFFLFFBQWdCLENBQUM7SUFDdEYsT0FBTyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQTtBQUNwRSxDQUFDO0FBRkQsMEJBRUM7QUFFTSxLQUFLLFVBQVUsS0FBSyxDQUF1QixPQUFtQjtJQUNqRSxPQUFPLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUE7QUFDM0QsQ0FBQztBQUZELHNCQUVDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQjtJQUNsQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzFELE9BQU8sR0FBRyxLQUFLLEtBQUssQ0FBQTtBQUN4QixDQUFDO0FBSEQsNENBR0M7QUFFTSxLQUFLLFVBQVUsc0JBQXNCLENBQXVCLGNBQXNCO0lBQ3JGLE1BQU0sa0JBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDN0IsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFBO0lBQ3BCLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1FBQ25DLE1BQU0sa0JBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxD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