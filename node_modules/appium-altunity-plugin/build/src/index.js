"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AltElement = exports.AltKeyCode = exports.AltBy = exports.AltUnityClient = exports.AltUnityPlugin = exports.UNITY_CONTEXT = void 0;
const plugin_1 = require("appium/plugin");
const client_1 = __importStar(require("./client"));
exports.AltUnityClient = client_1.default;
Object.defineProperty(exports, "AltBy", { enumerable: true, get: function () { return client_1.AltBy; } });
Object.defineProperty(exports, "AltElement", { enumerable: true, get: function () { return client_1.AltElement; } });
Object.defineProperty(exports, "AltKeyCode", { enumerable: true, get: function () { return client_1.AltKeyCode; } });
const commands_1 = require("./commands");
const EXTRA_CAPS = {
    altUnityHost: { presence: true },
    altUnityPort: { presence: true },
};
exports.UNITY_CONTEXT = 'UNITY';
class AltUnityPlugin extends plugin_1.BasePlugin {
    constructor(name) {
        super(name);
        this.unityElements = {};
        this.getPageSource = commands_1.getPageSource;
        this.getCurrentContext = commands_1.getCurrentContext;
        this.getContexts = commands_1.getContexts;
        this.setContext = commands_1.setContext;
        this.unityElementGuard = commands_1.unityElementGuard;
        this.click = commands_1.click;
        this.elementDisplayed = commands_1.elementDisplayed;
        this.getLocation = commands_1.getLocation;
        this.getElementRect = commands_1.getElementRect;
        this.getText = commands_1.getText;
        this.getAttribute = commands_1.getAttribute;
        this.getProperty = commands_1.getProperty;
        this.findElement = commands_1.findElement;
        this.findElements = commands_1.findElements;
        this._find = commands_1._find;
        this._findWithAltBy = commands_1._findWithAltBy;
        this.performActions = commands_1.performActions;
        this._performKeyActions = commands_1._performKeyActions;
        this._performPointerActions = commands_1._performPointerActions;
        this.getUrl = commands_1.getUrl;
        this.setUrl = commands_1.setUrl;
        this.execute = commands_1.execute;
        this.execute_getTimeScale = commands_1.execute_getTimeScale;
        this.execute_setTimeScale = commands_1.execute_setTimeScale;
        this.execute_setComponentProperty = commands_1.execute_setComponentProperty;
        this.client = new client_1.default({ log: this.logger });
        this.isInUnityContext = false;
    }
    shouldAvoidProxy(method, route) {
        if (this.isInUnityContext) {
            return true;
        }
        if (route.match(/\/contexts?$/)) {
            return true;
        }
        return false;
    }
    async createSession(next, driver) {
        if (driver.desiredCapConstraints) {
            driver.desiredCapConstraints = { ...driver.desiredCapConstraints, ...EXTRA_CAPS };
        }
        else {
            driver.desiredCapConstraints = EXTRA_CAPS;
        }
        // run the actual driver's create session now create session is weird and returns webdriver
        // protocol response, not a raw result, so we have to handle that
        const { value, error } = await next();
        if (error) {
            throw error;
        }
        const [id, caps] = value;
        this.platform = this.getPlatform(caps.platformName);
        // instantiate our unity client
        const { altUnityHost, altUnityPort } = caps;
        this.client = new client_1.default({ host: altUnityHost, port: altUnityPort, log: this.logger });
        await this.client.connect();
        return [id, caps];
    }
    getPlatform(platformName) {
        switch (platformName.toLowerCase()) {
            case 'mac': return "mac" /* Platform.Mac */;
            case 'windows': return "windows" /* Platform.Windows */;
            case 'linux': return "linux" /* Platform.Linux */;
            case 'ios': return "ios" /* Platform.iOS */;
            case 'android': return "android" /* Platform.Android */;
            default: throw new Error(`Can't find platform for '${platformName}'`);
        }
    }
    async unityContextGuard(next, fn) {
        if (!this.isInUnityContext) {
            return await next();
        }
        return await fn();
    }
    async getCachedScreenDims(driver) {
        if (!this.cachedScreenDims) {
            if (!driver.getWindowSize) {
                throw new Error(`Tried to get window size from driver but it doesn't support it`);
            }
            this.cachedScreenDims = await driver.getWindowSize();
        }
        return this.cachedScreenDims;
    }
    async deleteSession(next) {
        try {
            await this.client.disconnect();
        }
        finally {
            await next();
        }
    }
}
exports.AltUnityPlugin = AltUnityPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwQ0FBMEM7QUFFMUMsbURBQXlFO0FBb0tyRSx5QkFwS0csZ0JBQWMsQ0FvS0g7QUFDZCxzRkFyS3FCLGNBQUssT0FxS3JCO0FBRUwsMkZBdks0QixtQkFBVSxPQXVLNUI7QUFEViwyRkF0S3dDLG1CQUFVLE9Bc0t4QztBQXJLZCx5Q0EyQm1CO0FBR25CLE1BQU0sVUFBVSxHQUFHO0lBQ2YsWUFBWSxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQztJQUM5QixZQUFZLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDO0NBQ2pDLENBQUE7QUFPWSxRQUFBLGFBQWEsR0FBRyxPQUFPLENBQUE7QUFVcEMsTUFBTSxjQUFlLFNBQVEsbUJBQVU7SUFrQ25DLFlBQVksSUFBWTtRQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUE5QmYsa0JBQWEsR0FBaUMsRUFBRSxDQUFBO1FBR2hELGtCQUFhLEdBQUcsd0JBQWEsQ0FBQTtRQUM3QixzQkFBaUIsR0FBRyw0QkFBaUIsQ0FBQTtRQUNyQyxnQkFBVyxHQUFHLHNCQUFXLENBQUE7UUFDekIsZUFBVSxHQUFHLHFCQUFVLENBQUE7UUFDdkIsc0JBQWlCLEdBQUcsNEJBQWlCLENBQUE7UUFDckMsVUFBSyxHQUFHLGdCQUFLLENBQUE7UUFDYixxQkFBZ0IsR0FBRywyQkFBZ0IsQ0FBQTtRQUNuQyxnQkFBVyxHQUFHLHNCQUFXLENBQUE7UUFDekIsbUJBQWMsR0FBRyx5QkFBYyxDQUFBO1FBQy9CLFlBQU8sR0FBRyxrQkFBTyxDQUFBO1FBQ2pCLGlCQUFZLEdBQUcsdUJBQVksQ0FBQTtRQUMzQixnQkFBVyxHQUFHLHNCQUFXLENBQUE7UUFDekIsZ0JBQVcsR0FBRyxzQkFBVyxDQUFBO1FBQ3pCLGlCQUFZLEdBQUcs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