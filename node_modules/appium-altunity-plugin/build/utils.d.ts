export declare class Deferred<T> implements PromiseLike<T> {
    _resolve?: (item: T) => void;
    _reject?: (err: Error) => void;
    promise: PromiseLike<T>;
    constructor();
    resolve(item: T): void;
    reject(err: Error): void;
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
}
