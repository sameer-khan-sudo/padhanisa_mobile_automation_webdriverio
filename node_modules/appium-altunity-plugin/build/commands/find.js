"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._find = exports._findWithAltBy = exports.findElements = exports.findElement = void 0;
const driver_1 = require("appium/driver");
const xpath_1 = require("xpath");
const xmldom_1 = require("xmldom");
const element_1 = require("./element");
const client_1 = require("../client");
const VALID_STRATEGIES = [
    'xpath',
    'id',
    'css selector',
    'link text',
    'partial link text',
    'tag name',
];
async function findElement(next, driver, strategy, selector) {
    return await this._find(next, driver, strategy, selector, false);
}
exports.findElement = findElement;
async function findElements(next, driver, strategy, selector) {
    return await this._find(next, driver, strategy, selector, true);
}
exports.findElements = findElements;
async function _findWithAltBy(by, selector, contains = false) {
    const elements = await this.client.findObjects({ by, selector, contains });
    return elements.map((el) => {
        const unityEl = new element_1.UnityElement(el);
        this.unityElements[unityEl.id] = unityEl;
        return unityEl;
    });
}
exports._findWithAltBy = _findWithAltBy;
async function _find(next, driver, strategy, selector, multiple) {
    return await this.unityContextGuard(next, async () => {
        let els = [];
        switch (strategy) {
            case 'xpath':
                const xmlStr = await this.getPageSource(next);
                const dom = new xmldom_1.DOMParser().parseFromString(xmlStr);
                const nodes = (0, xpath_1.select)(selector, dom);
                els = nodes.map((n) => {
                    const id = getNodeAttrVal(n, 'id');
                    const elId = `${element_1.UNITY_ELEMENT_PREFIX}${id}`;
                    return this.unityElements[elId];
                });
                break;
            case 'id':
                els = await this._findWithAltBy(client_1.AltBy.ID, selector);
                break;
            case 'css selector':
                if (selector[0] !== '#') {
                    throw new driver_1.errors.InvalidArgumentError(`The only valid use of the css selector strategy is to ` +
                        `find and element by ID, e.g., #id`);
                }
                const id = selector.replace(/^#/, '');
                els = await this._findWithAltBy(client_1.AltBy.ID, id);
                break;
            case 'link text':
                els = await this._findWithAltBy(client_1.AltBy.TEXT, selector);
                break;
            case 'partial link text':
                els = await this._findWithAltBy(client_1.AltBy.TEXT, selector, true);
                break;
            case 'tag name':
                els = await this._findWithAltBy(client_1.AltBy.TAG, selector);
                break;
            default:
                throw new driver_1.errors.InvalidArgumentError(`The Unity context does not support the '${strategy}' strategy. ` +
                    `Please choose one of: ${JSON.stringify(VALID_STRATEGIES)}`);
        }
        if (!multiple) {
            if (els.length < 1) {
                throw new driver_1.errors.NoSuchElementError(undefined);
            }
            return els[0].asW3CElementObject;
        }
        return els.map((e) => e.asW3CElementObject);
    });
}
exports._find = _find;
function getNodeAttrVal(node, attr) {
    const attrObjs = Object.values(node.attributes).filter((obj) => obj.name === attr);
    if (!attrObjs.length) {
        throw new Error(`Tried to retrieve a node attribute '${attr}' but the node didn't have it`);
    }
    return attrObjs[0].value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9maW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLDBDQUFrRDtBQUNsRCxpQ0FBNEM7QUFDNUMsbUNBQWtDO0FBQ2xDLHVDQUE4RDtBQUM5RCxzQ0FBaUM7QUFFakMsTUFBTSxnQkFBZ0IsR0FBRztJQUNyQixPQUFPO0lBQ1AsSUFBSTtJQUNKLGNBQWM7SUFDZCxXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLFVBQVU7Q0FDYixDQUFBO0FBRU0sS0FBSyxVQUFVLFdBQVcsQ0FBdUIsSUFBaUIsRUFBRSxNQUFrQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7SUFDN0gsT0FBTyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ3BFLENBQUM7QUFGRCxrQ0FFQztBQUVNLEtBQUssVUFBVSxZQUFZLENBQXVCLElBQWlCLEVBQUUsTUFBa0IsRUFBRSxRQUFnQixFQUFFLFFBQWdCO0lBQzlILE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNuRSxDQUFDO0FBRkQsb0NBRUM7QUFFTSxLQUFLLFVBQVUsY0FBYyxDQUF1QixFQUFTLEVBQUUsUUFBZ0IsRUFBRSxXQUFvQixLQUFLO0lBQzdHLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUE7SUFDeEUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDdkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3BDLElB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