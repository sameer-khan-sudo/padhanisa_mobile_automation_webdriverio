"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performActions = exports._performPointerActions = exports._performKeyActions = void 0;
const driver_1 = require("appium/driver");
const client_1 = require("../client");
const bluebird_1 = __importDefault(require("bluebird"));
const { InvalidArgumentError } = driver_1.errors;
const POINTER_ACTION_TYPE = 'pointer';
const PAUSE = 'pause';
const KEYUP = 'keyUp';
const KEYDOWN = 'keyDown';
function validateActions(actions) {
    if (actions.length > 1) {
        throw new InvalidArgumentError(`The unity plugin does not allow multiple simultaneous actions. ` +
            `Ensure your actions object is a single sequence`);
    }
    return actions[0];
}
function validatePointerActions(actions) {
    throw new InvalidArgumentError(`The unity plugin does not support pointer actions yet. ` +
        `Use the native context for that!`);
}
function validateKeyActions(actions) {
    for (const action of actions.actions) {
        if (action.type === PAUSE) {
            if (typeof action.duration !== 'number') {
                throw new InvalidArgumentError(`Pause actions must have a duration integer in ms`);
            }
        }
        else {
            if (typeof action.value !== 'string') {
                throw new InvalidArgumentError(`Each key action must contain a value`);
            }
            const intVal = parseInt(action.value, 10);
            if ((intVal >= 0 && !Object.values(client_1.AltKeyCode).includes(intVal)) ||
                !Object.keys(client_1.AltKeyCode).includes(action.value)) {
                throw new InvalidArgumentError(`Received key value '${action.value}' but it could ` +
                    `not be mapped to a value in the AltKeyCode enum`);
            }
        }
    }
}
async function _performKeyActions(actions) {
    validateKeyActions(actions);
    for (const action of actions.actions) {
        if ((action.type === KEYDOWN || action.type === KEYUP) && typeof action.value === 'string') {
            // we either get a string number or a string non-number
            let code = parseInt(action.value, 10);
            if (isNaN(code)) {
                code = client_1.AltKeyCode[action.value];
            }
            if (action.type === KEYDOWN) {
                await this.client.keyDown(code);
            }
            else {
                await this.client.keyUp(code);
            }
        }
        if (action.type === PAUSE && typeof action.duration === 'number') {
            await bluebird_1.default.delay(action.duration);
        }
    }
}
exports._performKeyActions = _performKeyActions;
async function _performPointerActions(actions) {
    validatePointerActions(actions);
}
exports._performPointerActions = _performPointerActions;
async function performActions(next, _, actions) {
    return await this.unityContextGuard(next, async () => {
        const action = validateActions(actions);
        if (action.type === POINTER_ACTION_TYPE) {
            await this._performPointerActions(action);
        }
        else {
            await this._performKeyActions(action);
        }
    });
}
exports.performActions = performActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLDBDQUFrRDtBQUVsRCxzQ0FBc0M7QUFDdEMsd0RBQXdCO0FBRXhCLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLGVBQU0sQ0FBQTtBQUV2QyxNQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQTtBQUNyQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUE7QUFDckIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFBO0FBQ3JCLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQTtBQUV6QixTQUFTLGVBQWUsQ0FBQyxPQUF5QjtJQUM5QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxvQkFBb0IsQ0FBQyxpRUFBaUU7WUFDakUsaURBQWlELENBQUMsQ0FBQTtLQUNwRjtJQUVELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLE9BQThCO0lBQzFELE1BQU0sSUFBSSxvQkFBb0IsQ0FBQyx5REFBeUQ7UUFDekQsa0NBQWtDLENBQUMsQ0FBQTtBQUN0RSxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxPQUEwQjtJQUNsRCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDbEMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtZQUN2QixJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7Z0JBQ3JDLE1BQU0sSUFBSSxvQkFBb0IsQ0FBQyxrREFBa0QsQ0FBQyxDQUFBO2FBQ3JGO1NBQ0o7YUFBTTtZQUNILElBQUksT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDbEMsTUFBTSxJQUFJLG9CQUFvQixDQUFD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