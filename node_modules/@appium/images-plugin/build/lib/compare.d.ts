export type Visualized = {
    visualization: string | null | undefined;
};
export type MatchingResult = import("@appium/opencv").MatchingResult & Visualized;
export type OccurrenceResult = import("@appium/opencv").OccurrenceResult & Visualized;
export type SimilarityResult = import("@appium/opencv").SimilarityResult & Visualized;
export type ComparisonResult = MatchingResult | OccurrenceResult | SimilarityResult | SimilarityResult[];
/**
 * @typedef {{visualization: string|null|undefined}} Visualized
 * @typedef {import('@appium/opencv').MatchingResult & Visualized} MatchingResult
 * @typedef {import('@appium/opencv').OccurrenceResult & Visualized} OccurrenceResult
 * @typedef {import('@appium/opencv').SimilarityResult & Visualized} SimilarityResult
 * @typedef {MatchingResult|OccurrenceResult|SimilarityResult|SimilarityResult[]} ComparisonResult
 */
/**
 * Performs images comparison using OpenCV framework features.
 * It is expected that both OpenCV framework and opencv4nodejs
 * module are installed on the machine where Appium server is running.
 *
 * @param {string} mode - One of possible comparison modes:
 * matchFeatures, getSimilarity, matchTemplate
 * @param {string|Buffer} firstImage - Base64-encoded image file.
 * All image formats, that OpenCV library itself accepts, are supported.
 * @param {string|Buffer} secondImage - Base64-encoded image file.
 * All image formats, that OpenCV library itself accepts, are supported.
 * @param {import('@appium/opencv').MatchingOptions
 * |import('@appium/opencv').SimilarityOptions
 * |import('@appium/opencv').OccurrenceOptions} [options={}] - The content of this dictionary depends
 * on the actual `mode` value. See the documentation on `@appium/support`
 * module for more details.
 * @returns {Promise<ComparisonResult>} The content of the resulting dictionary depends
 * on the actual `mode` and `options` values. See the documentation on
 * `@appium/support` module for more details.
 * @throws {Error} If required OpenCV modules are not installed or
 * if `mode` value is incorrect or if there was an unexpected issue while
 * matching the images.
 */
export function compareImages(mode: string, firstImage: string | Buffer, secondImage: string | Buffer, options?: import("@appium/opencv").MatchingOptions | import("@appium/opencv").SimilarityOptions | import("@appium/opencv").OccurrenceOptions): Promise<ComparisonResult>;
//# sourceMappingURL=compare.d.ts.map