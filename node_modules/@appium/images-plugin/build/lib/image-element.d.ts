/**
 * @typedef Dimension
 * @property {number} width - width of rect
 * @property {number} height - height of rect
 */
/**
 * @typedef Position
 * @property {number} x - x coordinate
 * @property {number} y - y coordinate
 */
/**
 * @typedef ImageElementOpts
 * @property {Buffer} template - the image which was used to find this ImageElement
 * @property {Rect} rect - bounds of matched image element
 * @property {number} score The similarity score as a float number in range [0.0, 1.0].
 * 1.0 is the highest score (means both images are totally equal).
 * @property {Buffer?} match - the image which has matched marks. Defaults to null.
 * @property {import('./finder').default?} finder - the finder we can use to re-check stale elements
 * @property {import('@appium/types').Rect?} containerRect - The bounding
 * rectangle to limit the search in
 */
/**
 * Representation of an "image element", which is simply a set of coordinates
 * and methods that can be used on that set of coordinates via the driver
 */
export default class ImageElement {
    /**
     * Handle various Appium commands that involve an image element
     *
     * @param {import('appium/driver').BaseDriver} driver - the driver to use for commands
     * @param {string} cmd - the name of the driver command
     * @param {any} imgEl - image element object
     * @param {string[]} args - Rest of arguments for executeScripts
     *
     * @returns {Promise<any>} - the result of running a command
     */
    static execute(driver: import("appium/driver").BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord>, imgEl: any, cmd: string, ...args: string[]): Promise<any>;
    /**
     * @param {ImageElementOpts} options
     */
    constructor({ template, rect, score, match, finder, containerRect, }: ImageElementOpts);
    template: Buffer<ArrayBufferLike>;
    rect: import("@appium/types").Rect;
    id: string;
    match: Buffer<ArrayBufferLike> | null;
    score: number;
    finder: import("./finder").default | null;
    containerRect: import("@appium/types").Rect | null;
    /**
     * @returns {Dimension} - dimension of element
     */
    get size(): Dimension;
    /**
     * @returns {Position} - coordinates of top-left corner of element
     */
    get location(): Position;
    /**
     * @returns {Position} - coordinates of center of element
     */
    get center(): Position;
    /**
     * @returns {string} - the base64-encoded original image used for matching
     */
    get originalImage(): string;
    /**
     * @returns {string|null} - the base64-encoded image which has matched marks
     */
    get matchedImage(): string | null;
    /**
     *
     * @returns {Element} - this image element as a WebElement
     */
    asElement(): Element;
    /**
     * @param {ImageElement} other - an ImageElement to compare with this one
     *
     * @returns {boolean} - whether the other element and this one have the same
     * properties
     */
    equals(other: ImageElement): boolean;
    /**
     * Use a driver to tap the screen at the center of this ImageElement's
     * position
     *
     * @param {import('appium/driver').BaseDriver} driver - driver for calling actions with
     */
    click(driver: import("appium/driver").BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord>): Promise<any>;
    /**
     * Perform lookup of image element(s) inside of the current element
     *
     * @param {boolean} multiple - Whether to lookup multiple elements
     * @param {import('appium/driver').BaseDriver} driver - The driver to use for commands
     * @param  {string[]} args = Rest of arguments for executeScripts
     * @returns {Promise<Element|Element[]|ImageElement>} - WebDriver element with a special id prefix
     */
    find(multiple: boolean, driver: import("appium/driver").BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord>, ...args: string[]): Promise<Element | Element[] | ImageElement>;
}
export type Dimension = {
    /**
     * - width of rect
     */
    width: number;
    /**
     * - height of rect
     */
    height: number;
};
export type Position = {
    /**
     * - x coordinate
     */
    x: number;
    /**
     * - y coordinate
     */
    y: number;
};
export type ImageElementOpts = {
    /**
     * - the image which was used to find this ImageElement
     */
    template: Buffer;
    /**
     * - bounds of matched image element
     */
    rect: Rect;
    /**
     * The similarity score as a float number in range [0.0, 1.0].
     * 1.0 is the highest score (means both images are totally equal).
     */
    score: number;
    /**
     * - the image which has matched marks. Defaults to null.
     */
    match: Buffer | null;
    /**
     * - the finder we can use to re-check stale elements
     */
    finder: import("./finder").default | null;
    /**
     * - The bounding
     * rectangle to limit the search in
     */
    containerRect: import("@appium/types").Rect | null;
};
export type Rect = import("@appium/types").Rect;
export type Element = import("@appium/types").Element;
//# sourceMappingURL=image-element.d.ts.map