export default class ImageElementFinder {
    /**
     * @param {number} max
     */
    constructor(max?: number);
    /** @type {LRUCache<string,ImageElement>} */
    _imgElCache: LRUCache<string, ImageElement>;
    /**
     * @param {ImageElement} imgEl
     * @returns {Element}
     */
    registerImageElement(imgEl: ImageElement): Element;
    /**
     * @param {string} imgElId
     * @returns {ImageElement|undefined}
     */
    getImageElement(imgElId: string): ImageElement | undefined;
    clearImageElements(): void;
    /**
     * @typedef FindByImageOptions
     * @property {boolean} [shouldCheckStaleness=false] - whether this call to find an
     * image is merely to check staleness. If so we can bypass a lot of logic
     * @property {boolean} [multiple=false] - Whether we are finding one element or
     * multiple
     * @property {boolean} [ignoreDefaultImageTemplateScale=false] - Whether we
     * ignore defaultImageTemplateScale. It can be used when you would like to
     * scale template with defaultImageTemplateScale setting.
     * @property {import('@appium/types').Rect?} [containerRect=null] - The bounding
     * rectangle to limit the search in
     */
    /**
     * Find a screen rect represented by an ImageElement corresponding to an image
     * template sent in by the client
     *
     * @param {Buffer} template - image used as a template to be
     * matched in the screenshot
     * @param {ExternalDriver} driver
     * @param {FindByImageOptions} opts - additional options
     *
     * @returns {Promise<Element|Element[]|ImageElement>} - WebDriver element with a special id prefix
     */
    findByImage(template: Buffer, driver: ExternalDriver, { shouldCheckStaleness, multiple, ignoreDefaultImageTemplateScale, containerRect }: {
        /**
         * - whether this call to find an
         * image is merely to check staleness. If so we can bypass a lot of logic
         */
        shouldCheckStaleness?: boolean | undefined;
        /**
         * - Whether we are finding one element or
         * multiple
         */
        multiple?: boolean | undefined;
        /**
         * - Whether we
         * ignore defaultImageTemplateScale. It can be used when you would like to
         * scale template with defaultImageTemplateScale setting.
         */
        ignoreDefaultImageTemplateScale?: boolean | undefined;
        /**
         * - The bounding
         * rectangle to limit the search in
         */
        containerRect?: import("@appium/types").Rect | null | undefined;
    }): Promise<Element | Element[] | ImageElement>;
    /**
     * Ensure that the image template sent in for a find is of a suitable size
     *
     * @param {Buffer} template - template image
     * @param {import('@appium/types').Size} maxSize - size of the bounding rectangle
     *
     * @returns {Promise<Buffer>} image, potentially resized
     */
    ensureTemplateSize(template: Buffer, maxSize: import("@appium/types").Size): Promise<Buffer>;
    /**
     * Get the screenshot image that will be used for find by element, potentially
     * altering it in various ways based on user-requested settings
     *
     * @param {ExternalDriver} driver
     * @param {import('@appium/types').Size} screenSize - The original size of the screen
     *
     * @returns {Promise<Screenshot & {scale?: ScreenshotScale}>} PNG screenshot and ScreenshotScale
     */
    getScreenshotForImageFind(driver: ExternalDriver, screenSize: import("@appium/types").Size): Promise<Screenshot & {
        scale?: ScreenshotScale;
    }>;
    /**
     * @typedef ImageTemplateSettings
     * @property {boolean} [fixImageTemplateScale=false] - fixImageTemplateScale in device-settings
     * @property {number} [defaultImageTemplateScale=DEFAULT_TEMPLATE_IMAGE_SCALE] - defaultImageTemplateScale in device-settings
     * @property {boolean} [ignoreDefaultImageTemplateScale=false] - Ignore defaultImageTemplateScale if it has true.
     * If the template has been scaled to defaultImageTemplateScale or should ignore the scale,
     * this parameter should be true. e.g. click in image-element module
     * @property {number} [xScale=DEFAULT_FIX_IMAGE_TEMPLATE_SCALE] - Scale ratio for width
     * @property {number} [yScale=DEFAULT_FIX_IMAGE_TEMPLATE_SCALE] - Scale ratio for height
  
     */
    /**
     * Get a image that will be used for template maching.
     * Returns scaled image if scale ratio is provided.
     *
     * @param {Buffer} template - image used as a template to be
     * matched in the screenshot
     * @param {ImageTemplateSettings} opts - Image template scale related options
     *
     * @returns {Promise<Buffer>} scaled template screenshot
     */
    fixImageTemplateScale(template: Buffer, opts: {
        /**
         * - fixImageTemplateScale in device-settings
         */
        fixImageTemplateScale?: boolean | undefined;
        /**
         * - defaultImageTemplateScale in device-settings
         */
        defaultImageTemplateScale?: number | undefined;
        /**
         * - Ignore defaultImageTemplateScale if it has true.
         * If the template has been scaled to defaultImageTemplateScale or should ignore the scale,
         * this parameter should be true. e.g. click in image-element module
         */
        ignoreDefaultImageTemplateScale?: boolean | undefined;
        /**
         * - Scale ratio for width
         */
        xScale?: number | undefined;
        /**
         * - Scale ratio for height
         */
        yScale?: number | undefined;
    }): Promise<Buffer>;
}
export type ExternalDriver = import("@appium/types").ExternalDriver;
export type Element = import("@appium/types").Element;
export type Screenshot = {
    /**
     * - screenshot image as PNG
     */
    screenshot: Buffer;
};
export type ScreenshotScale = {
    /**
     * - Scale ratio for width
     */
    xScale: number;
    /**
     * - Scale ratio for height
     */
    yScale: number;
};
import { LRUCache } from 'lru-cache';
import { ImageElement } from './image-element';
//# sourceMappingURL=finder.d.ts.map