"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RESPONSE_LOG_LENGTH = void 0;
exports.appInfoFromDict = appInfoFromDict;
exports.checkParams = checkParams;
exports.convertResult = convertResult;
exports.deferredPromise = deferredPromise;
exports.getDebuggerAppKey = getDebuggerAppKey;
exports.getPossibleDebuggerAppKeys = getPossibleDebuggerAppKeys;
exports.pageArrayFromDict = pageArrayFromDict;
exports.simpleStringify = simpleStringify;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

const WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';
const WEB_CONTENT_PROCESS_BUNDLE_ID = 'process-com.apple.WebKit.WebContent';
const SAFARI_VIEW_PROCESS_BUNDLE_ID = 'process-SafariViewService';
const SAFARI_VIEW_BUNDLE_ID = 'com.apple.SafariViewService';
const WILDCARD_BUNDLE_ID = '*';
const INACTIVE_APP_CODE = 0;
const ACCEPTED_PAGE_TYPES = ['WIRTypeWeb', 'WIRTypeWebPage', 'WIRTypePage'];
const RESPONSE_LOG_LENGTH = 100;
exports.RESPONSE_LOG_LENGTH = RESPONSE_LOG_LENGTH;

function appInfoFromDict(dict) {
  const id = dict.WIRApplicationIdentifierKey;
  const isProxy = _lodash.default.isString(dict.WIRIsApplicationProxyKey) ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true' : dict.WIRIsApplicationProxyKey;
  let isAutomationEnabled = !!dict.WIRRemoteAutomationEnabledKey;

  if (_lodash.default.has(dict, 'WIRAutomationAvailabilityKey')) {
    if (_lodash.default.isString(dict.WIRAutomationAvailabilityKey)) {
      isAutomationEnabled = dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityUnknown' ? 'Unknown' : dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityAvailable';
    } else {
      isAutomationEnabled = !!dict.WIRAutomationAvailabilityKey;
    }
  }

  const entry = {
    id,
    isProxy,
    name: dict.WIRApplicationNameKey,
    bundleId: dict.WIRApplicationBundleIdentifierKey,
    hostId: dict.WIRHostApplicationIdentifierKey,
    isActive: dict.WIRIsApplicationActiveKey !== INACTIVE_APP_CODE,
    isAutomationEnabled
  };
  return [id, entry];
}

function pageArrayFromDict(pageDict) {
  if (pageDict.id) {
    return [pageDict];
  }

  let newPageArray = [];

  for (const dict of _lodash.default.values(pageDict)) {
    if (_lodash.default.isUndefined(dict.WIRTypeKey) || ACCEPTED_PAGE_TYPES.includes(dict.WIRTypeKey)) {
      newPageArray.push({
        id: dict.WIRPageIdentifierKey,
        title: dict.WIRTitleKey,
        url: dict.WIRURLKey,
        isKey: !_lodash.default.isUndefined(dict.WIRConnectionIdentifierKey)
      });
    }
  }

  return newPageArray;
}

function getDebuggerAppKey(bundleId, appDict) {
  let appId;

  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId === bundleId) {
      appId = key;
      break;
    }
  }

  if (appId) {
    _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

    let proxyAppId;

    for (const [key, data] of _lodash.default.toPairs(appDict)) {
      if (data.isProxy && data.hostId === appId) {
        _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

        proxyAppId = key;
      }
    }

    if (proxyAppId) {
      appId = proxyAppId;

      _logger.default.debug(`Using proxied app id '${appId}'`);
    }
  }

  return appId;
}

function appIdForBundle(bundleId, appDict) {
  let appId;

  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId.endsWith(bundleId)) {
      appId = key;
      break;
    }
  }

  if (!appId && bundleId !== WEB_CONTENT_BUNDLE_ID) {
    return appIdForBundle(WEB_CONTENT_BUNDLE_ID, appDict);
  }

  return appId;
}

function getPossibleDebuggerAppKeys(bundleIds, appDict) {
  let proxiedAppIds = [];

  const possibleBundleIds = _lodash.default.uniq([WEB_CONTENT_BUNDLE_ID, WEB_CONTENT_PROCESS_BUNDLE_ID, SAFARI_VIEW_PROCESS_BUNDLE_ID, SAFARI_VIEW_BUNDLE_ID, WILDCARD_BUNDLE_ID, ...bundleIds]);

  _logger.default.debug(`Checking for bundle identifiers: ${possibleBundleIds.join(', ')}`);

  for (const bundleId of possibleBundleIds) {
    const appId = appIdForBundle(bundleId, appDict);

    if (appId) {
      proxiedAppIds.push(appId);

      _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

      for (const [key, data] of _lodash.default.toPairs(appDict)) {
        if (data.isProxy && data.hostId === appId) {
          _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

          proxiedAppIds.push(key);
        }
      }
    }
  }

  return _lodash.default.uniq(proxiedAppIds);
}

function checkParams(params) {
  const errors = _lodash.default.toPairs(params).filter(([, value]) => _lodash.default.isNil(value)).map(([param]) => param);

  if (errors.length) {
    throw new Error(`Missing ${_support.util.pluralize('parameter', errors.length)}: ${errors.join(', ')}`);
  }
}

function simpleStringify(value, multiline = false) {
  if (!value) {
    return JSON.stringify(value);
  }

  let cleanValue = _lodash.default.clone(value);

  for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
    delete cleanValue[property];
  }

  return multiline ? JSON.stringify(cleanValue, null, 2) : JSON.stringify(cleanValue);
}

function deferredPromise() {
  let resolve;
  let reject;
  const promise = new _bluebird.default((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}

function convertResult(res) {
  if (_lodash.default.isUndefined(res)) {
    throw new Error(`Did not get OK result from remote debugger. Result was: ${_lodash.default.truncate(simpleStringify(res), {
      length: RESPONSE_LOG_LENGTH
    })}`);
  } else if (_lodash.default.isString(res)) {
    try {
      res = JSON.parse(res);
    } catch (err) {}
  } else if (!_lodash.default.isObject(res)) {
    throw new Error(`Result has unexpected type: (${typeof res}).`);
  }

  if (res.status && res.status !== 0) {
    throw (0, _baseDriver.errorFromMJSONWPStatusCode)(res.status, res.value.message || res.value);
  }

  const value = _lodash.default.has(res, 'value') ? res.value : res;

  if (_lodash.default.isObject(value)) {
    for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
      delete value[property];
    }
  }

  return value;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJXRUJfQ09OVEVOVF9CVU5ETEVfSUQiLCJXRUJfQ09OVEVOVF9QUk9DRVNTX0JVTkRMRV9JRCIsIlNBRkFSSV9WSUVXX1BST0NFU1NfQlVORExFX0lEIiwiU0FGQVJJX1ZJRVdfQlVORExFX0lEIiwiV0lMRENBUkRfQlVORExFX0lEIiwiSU5BQ1RJVkVfQVBQX0NPREUiLCJBQ0NFUFRFRF9QQUdFX1RZUEVTIiwiUkVTUE9OU0VfTE9HX0xFTkdUSCIsImFwcEluZm9Gcm9tRGljdCIsImRpY3QiLCJpZCIsIldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleSIsImlzUHJveHkiLCJfIiwiaXNTdHJpbmciLCJXSVJJc0FwcGxpY2F0aW9uUHJveHlLZXkiLCJ0b0xvd2VyQ2FzZSIsImlzQXV0b21hdGlvbkVuYWJsZWQiLCJXSVJSZW1vdGVBdXRvbWF0aW9uRW5hYmxlZEtleSIsImhhcyIsIldJUkF1dG9tYXRpb25BdmFpbGFiaWxpdHlLZXkiLCJlbnRyeSIsIm5hbWUiLCJXSVJBcHBsaWNhdGlvbk5hbWVLZXkiLCJidW5kbGVJZCIsIldJUkFwcGxpY2F0aW9uQnVuZGxlSWRlbnRpZmllcktleSIsImhvc3RJZCIsIldJUkhvc3RBcHBsaWNhdGlvbklkZW50aWZpZXJLZXkiLCJpc0FjdGl2ZSIsIldJUklzQXBwbGljYXRpb25BY3RpdmVLZXkiLCJwYWdlQXJyYXlGcm9tRGljdCIsInBhZ2VEaWN0IiwibmV3UGFnZUFycmF5IiwidmFsdWVzIiwiaXNVbmRlZmluZWQiLCJXSVJUeXBlS2V5IiwiaW5jbHVkZXMiLCJwdXNoIiwiV0lSUGFnZUlkZW50aWZpZXJLZXkiLCJ0aXRsZSIsIldJUlRpdGxlS2V5IiwidXJsIiwiV0lSVVJMS2V5IiwiaXNLZXkiLCJXSVJDb25uZWN0aW9uSWRlbnRpZmllcktleSIsImdldERlYnVnZ2VyQXBwS2V5IiwiYXBwRGljdCIsImFwcElkIiwia2V5IiwiZGF0YSIsInRvUGFpcnMiLCJsb2ciLCJkZWJ1ZyIsInByb3h5QXBwSWQiLCJhcHBJZEZvckJ1bmRsZSIsImVuZHNXaXRoIiwiZ2V0UG9zc2libGVEZWJ1Z2dlckFwcEtleXMiLCJidW5kbGVJZHMiLCJwcm94aWVkQXBwSWRzIiwicG9zc2libGVCdW5kbGVJZHMiLCJ1bmlxIiwiam9pbiIsImNoZWNrUGFyYW1zIiwicGFyYW1zIiwiZXJyb3JzIiwiZmlsdGVyIiwidmFsdWUiLCJpc05pbCIsIm1hcCIsInBhcmFtIiwibGVuZ3RoIiwiRXJyb3IiLCJ1dGlsIiwicGx1cmFsaXplIiwic2ltcGxlU3RyaW5naWZ5IiwibXVsdGlsaW5lIiwiSlNPTiIsInN0cmluZ2lmeSIsImNsZWFuVmFsdWUiLCJjbG9uZSIsInByb3BlcnR5IiwiZGVmZXJyZWRQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCJCIiwicmVzIiwicmVqIiwiY29udmVydFJlc3VsdCIsInRydW5jYXRlIiwicGFyc2UiLCJlcnIiLCJpc09iamVjdCIsInN0YXR1cyIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxxQkFBcUIsR0FBRyw2QkFBOUI7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRyxxQ0FBdEM7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRywyQkFBdEM7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyw2QkFBOUI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxHQUEzQjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHLENBQTFCO0FBR0EsTUFBTUMsbUJBQW1CLEdBQUcsQ0FDMUIsWUFEMEIsRUFFMUIsZ0JBRjBCLEVBRzFCLGFBSDBCLENBQTVCO0FBTUEsTUFBTUMsbUJBQW1CLEdBQUcsR0FBNUI7OztBQU1BLFNBQVNDLGVBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLFFBQU1DLEVBQUUsR0FBR0QsSUFBSSxDQUFDRSwyQkFBaEI7QUFDQSxRQUFNQyxPQUFPLEdBQUdDLGdCQUFF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LE9BQXBDLEVBQTZDLFVBQTdDLENBQXZCLEVBQWlGO0FBQy9FLGFBQU9kLEtBQUssQ0FBQ2MsUUFBRCxDQUFaO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPZCxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZSB9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY29uc3QgV0VCX0NPTlRFTlRfQlVORExFX0lEID0gJ2NvbS5hcHBsZS5XZWJLaXQuV2ViQ29udGVudCc7XG5jb25zdCBXRUJfQ09OVEVOVF9QUk9DRVNTX0JVTkRMRV9JRCA9ICdwcm9jZXNzLWNvbS5hcHBsZS5XZWJLaXQuV2ViQ29udGVudCc7XG5jb25zdCBTQUZBUklfVklFV19QUk9DRVNTX0JVTkRMRV9JRCA9ICdwcm9jZXNzLVNhZmFyaVZpZXdTZXJ2aWNlJztcbmNvbnN0IFNBRkFSSV9WSUVXX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuU2FmYXJpVmlld1NlcnZpY2UnO1xuY29uc3QgV0lMRENBUkRfQlVORExFX0lEID0gJyonO1xuXG5jb25zdCBJTkFDVElWRV9BUFBfQ09ERSA9IDA7XG5cbi8vIHZhbHVlcyBmb3IgdGhlIHBhZ2UgYFdJUlR5cGVLZXlgIGVudHJ5XG5jb25zdCBBQ0NFUFRFRF9QQUdFX1RZUEVTID0gW1xuICAnV0lSVHlwZVdlYicsIC8vIHVwIHRvIGlPUyAxMS4zXG4gICdXSVJUeXBlV2ViUGFnZScsIC8vIGlPUyAxMS40XG4gICdXSVJUeXBlUGFnZScsIC8vIGlPUyAxMS40IHdlYnZpZXdcbl07XG5cbmNvbnN0IFJFU1BPTlNFX0xPR19MRU5HVEggPSAxMDA7XG5cbi8qXG4gKiBUYWtlcyBhIGRpY3Rpb25hcnkgZnJvbSB0aGUgcmVtb3RlIGRlYnVnZ2VyIGFuZCBtYWtlcyBhIG1vcmUgbWFuYWdlYWJsZVxuICogZGljdGlvbmFyeSB3aG9zZSBrZXlzIGFyZSB1bmRlcnN0YW5kYWJsZVxuICovXG5mdW5jdGlvbiBhcHBJbmZvRnJvbURpY3QgKGRpY3QpIHtcbiAgY29uc3QgaWQgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgY29uc3QgaXNQcm94eSA9IF8uaXNTdHJpbmcoZGljdC5XSVJJc0FwcGxpY2F0aW9uUHJveHlLZXkpXG4gICAgPyBkaWN0LldJUklzQXBwbGljYXRpb25Qcm94eUtleS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSdcbiAgICA6IGRpY3QuV0lSSXNBcHBsaWNhdGlvblByb3h5S2V5O1xuICAvLyBhdXRvbWF0aW9uIGVuYWJsZWQgY2FuIGJlIGVpdGhlciBmcm9tIHRoZSBrZXlzXG4gIC8vICAgLSBXSVJSZW1vdGVBdXRvbWF0aW9uRW5hYmxlZEtleSAoYm9vbGVhbilcbiAgLy8gICAtIFdJUkF1dG9tYXRpb25BdmFpbGFiaWxpdHlLZXkgKHN0cmluZyBvciBib29sZWFuKVxuICBsZXQgaXNBdXRvbWF0aW9uRW5hYmxlZCA9ICEhZGljdC5XSVJSZW1vdGVBdXRvbWF0aW9uRW5hYmxlZEtleTtcbiAgaWYgKF8uaGFzKGRpY3QsICdXSVJBdXRvbWF0aW9uQXZhaWxhYmlsaXR5S2V5JykpIHtcbiAgICBpZiAoXy5pc1N0cmluZyhkaWN0LldJUkF1dG9tYXRpb25BdmFpbGFiaWxpdHlLZXkpKSB7XG4gICAgICBpc0F1dG9tYXRpb25FbmFibGVkID0gZGljdC5XSVJBdXRvbWF0aW9uQXZhaWxhYmlsaXR5S2V5ID09PSAnV0lSQXV0b21hdGlvbkF2YWlsYWJpbGl0eVVua25vd24nXG4gICAgICAgID8gJ1Vua25vd24nXG4gICAgICAgIDogZGljdC5XSVJBdXRvbWF0aW9uQXZhaWxhYmlsaXR5S2V5ID09PSAnV0lSQXV0b21hdGlvbkF2YWlsYWJpbGl0eUF2YWlsYWJsZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzQXV0b21hdGlvbkVuYWJsZWQgPSAhIWRpY3QuV0lSQXV0b21hdGlvbkF2YWlsYWJpbGl0eUtleTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZW50cnkgPSB7XG4gICAgaWQsXG4gICAgaXNQcm94eSxcbiAgICBuYW1lOiBkaWN0LldJUkFwcGxpY2F0aW9uTmFtZUtleSxcbiAgICBidW5kbGVJZDogZGljdC5XSVJBcHBsaWNhdGlvbkJ1bmRsZUlkZW50aWZpZXJLZXksXG4gICAgaG9zdElkOiBkaWN0LldJUkhvc3RBcHBsaWNhdGlvbklkZW50aWZpZXJLZXksXG4gICAgaXNBY3RpdmU6IGRpY3QuV0lSSXNBcHBsaWNhdGlvbkFjdGl2ZUtleSAhPT0gSU5BQ1RJVkVfQVBQX0NPREUsXG4gICAgaXNBdXRvbWF0aW9uRW5hYmxlZCxcbiAgfTtcblxuICByZXR1cm4gW2lkLCBlbnRyeV07XG59XG5cbi8qXG4gKiBUYWtlIGEgZGljdGlvbmFyeSBmcm9tIHRoZSByZW1vdGUgZGVidWdnZXIgYW5kIG1ha2VzIGEgbW9yZSBtYW5hZ2VhYmxlXG4gKiBkaWN0aW9uYXJ5IG9mIHBhZ2VzIGF2YWlsYWJsZS5cbiAqL1xuZnVuY3Rpb24gcGFnZUFycmF5RnJvbURpY3QgKHBhZ2VEaWN0KSB7XG4gIGlmIChwYWdlRGljdC5pZCkge1xuICAgIC8vIHRoZSBwYWdlIGlzIGFscmVhZHkgdHJhbnNsYXRlZCwgc28gd3JhcCBpbiBhbiBhcnJheSBhbmQgcGFzcyBiYWNrXG4gICAgcmV0dXJuIFtwYWdlRGljdF07XG4gIH1cbiAgbGV0IG5ld1BhZ2VBcnJheSA9IFtdO1xuICBmb3IgKGNvbnN0IGRpY3Qgb2YgXy52YWx1ZXMocGFnZURpY3QpKSB7XG4gICAgLy8gY291bnQgb25seSBXSVJUeXBlV2ViIHBhZ2VzIGFuZCBpZ25vcmUgYWxsIG90aGVycyAoV0lSVHlwZUphdmFTY3JpcHQgZXRjKVxuICAgIGlmIChfLmlzVW5kZWZpbmVkKGRpY3QuV0lSVHlwZUtleSkgfHwgQUNDRVBURURfUEFHRV9UWVBFUy5pbmNsdWRlcyhkaWN0LldJUlR5cGVLZXkpKSB7XG4gICAgICBuZXdQYWdlQXJyYXkucHVzaCh7XG4gICAgICAgIGlkOiBkaWN0LldJUlBhZ2VJZGVudGlmaWVyS2V5LFxuICAgICAgICB0aXRsZTogZGljdC5XSVJUaXRsZUtleSxcbiAgICAgICAgdXJsOiBkaWN0LldJUlVSTEtleSxcbiAgICAgICAgaXNLZXk6ICFfLmlzVW5kZWZpbmVkKGRpY3QuV0lSQ29ubmVjdGlvbklkZW50aWZpZXJLZXkpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdQYWdlQXJyYXk7XG59XG5cbi8qXG4gKiBHaXZlbiBhIGJ1bmRsZSBpZCwgZmluZHMgdGhlIGNvcnJlY3QgcmVtb3RlIGRlYnVnZ2VyIGFwcCB0aGF0IGlzXG4gKiBjb25uZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGdldERlYnVnZ2VyQXBwS2V5IChidW5kbGVJZCwgYXBwRGljdCkge1xuICBsZXQgYXBwSWQ7XG4gIGZvciAoY29uc3QgW2tleSwgZGF0YV0gb2YgXy50b1BhaXJzKGFwcERpY3QpKSB7XG4gICAgaWYgKGRhdGEuYnVuZGxlSWQgPT09IGJ1bmRsZUlkKSB7XG4gICAgICBhcHBJZCA9IGtleTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvLyBub3cgd2UgbmVlZCB0byBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIHBpY2sgYSBwcm94eSBmb3IgdGhpcyBpbnN0ZWFkXG4gIGlmIChhcHBJZCkge1xuICAgIGxvZy5kZWJ1ZyhgRm91bmQgYXBwIGlkIGtleSAnJHthcHBJZH0nIGZvciBidW5kbGUgJyR7YnVuZGxlSWR9J2ApO1xuICAgIGxldCBwcm94eUFwcElkO1xuICAgIGZvciAoY29uc3QgW2tleSwgZGF0YV0gb2YgXy50b1BhaXJzKGFwcERpY3QpKSB7XG4gICAgICBpZiAoZGF0YS5pc1Byb3h5ICYmIGRhdGEuaG9zdElkID09PSBhcHBJZCkge1xuICAgICAgICBsb2cuZGVidWcoYEZvdW5kIHNlcGFyYXRlIGJ1bmRsZUlkICcke2RhdGEuYnVuZGxlSWR9JyBgICtcbiAgICAgICAgICAgICAgICAgIGBhY3RpbmcgYXMgcHJveHkgZm9yICcke2J1bmRsZUlkfScsIHdpdGggYXBwIGlkICcke2tleX0nYCk7XG4gICAgICAgIC8vIHNldCB0aGUgYXBwIGlkLi4uIHRoZSBsYXN0IG9uZSB3aWxsIGJlIHVzZWQsIHNvIGp1c3Qga2VlcCByZS1hc3NpZ25pbmdcbiAgICAgICAgcHJveHlBcHBJZCA9IGtleTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3h5QXBwSWQpIHtcbiAgICAgIGFwcElkID0gcHJveHlBcHBJZDtcbiAgICAgIGxvZy5kZWJ1ZyhgVXNpbmcgcHJveGllZCBhcHAgaWQgJyR7YXBwSWR9J2ApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcHBJZDtcbn1cblxuZnVuY3Rpb24gYXBwSWRGb3JCdW5kbGUgKGJ1bmRsZUlkLCBhcHBEaWN0KSB7XG4gIGxldCBhcHBJZDtcbiAgZm9yIChjb25zdCBba2V5LCBkYXRhXSBvZiBfLnRvUGFpcnMoYXBwRGljdCkpIHtcbiAgICBpZiAoZGF0YS5idW5kbGVJZC5lbmRzV2l0aChidW5kbGVJZCkpIHtcbiAgICAgIGFwcElkID0ga2V5O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgbm90aGluZyBpcyBmb3VuZCwgdHJ5IHRvIGdldCB0aGUgZ2VuZXJpYyBhcHBcbiAgaWYgKCFhcHBJZCAmJiBidW5kbGVJZCAhPT0gV0VCX0NPTlRFTlRfQlVORExFX0lEKSB7XG4gICAgcmV0dXJuIGFwcElkRm9yQnVuZGxlKFdFQl9DT05URU5UX0JVTkRMRV9JRCwgYXBwRGljdCk7XG4gIH1cblxuICByZXR1cm4gYXBwSWQ7XG59XG5cbmZ1bmN0aW9uIGdldFBvc3NpYmxlRGVidWdnZXJBcHBLZXlzIChidW5kbGVJZHMsIGFwcERpY3QpIHtcbiAgbGV0IHByb3hpZWRBcHBJZHMgPSBbXTtcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBwb3NzaWJsZSBidW5kbGUgaWRlbnRpZmllcnNcbiAgY29uc3QgcG9zc2libGVCdW5kbGVJZHMgPSBfLnVuaXEoW1xuICAgIFdFQl9DT05URU5UX0JVTkRMRV9JRCxcbiAgICBXRUJfQ09OVEVOVF9QUk9DRVNTX0JVTkRMRV9JRCxcbiAgICBTQUZBUklfVklFV19QUk9DRVNTX0JVTkRMRV9JRCxcbiAgICBTQUZBUklfVklFV19CVU5ETEVfSUQsXG4gICAgV0lMRENBUkRfQlVORExFX0lELFxuICAgIC4uLmJ1bmRsZUlkcyxcbiAgXSk7XG4gIGxvZy5kZWJ1ZyhgQ2hlY2tpbmcgZm9yIGJ1bmRsZSBpZGVudGlmaWVyczogJHtwb3NzaWJsZUJ1bmRsZUlkcy5qb2luKCcsICcpfWApO1xuICBmb3IgKGNvbnN0IGJ1bmRsZUlkIG9mIHBvc3NpYmxlQnVuZGxlSWRzKSB7XG4gICAgY29uc3QgYXBwSWQgPSBhcHBJZEZvckJ1bmRsZShidW5kbGVJZCwgYXBwRGljdCk7XG5cbiAgICAvLyBub3cgd2UgbmVlZCB0byBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIHBpY2sgYSBwcm94eSBmb3IgdGhpcyBpbnN0ZWFkXG4gICAgaWYgKGFwcElkKSB7XG4gICAgICBwcm94aWVkQXBwSWRzLnB1c2goYXBwSWQpO1xuICAgICAgbG9nLmRlYnVnKGBGb3VuZCBhcHAgaWQga2V5ICcke2FwcElkfScgZm9yIGJ1bmRsZSAnJHtidW5kbGVJZH0nYCk7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIGRhdGFdIG9mIF8udG9QYWlycyhhcHBEaWN0KSkge1xuICAgICAgICBpZiAoZGF0YS5pc1Byb3h5ICYmIGRhdGEuaG9zdElkID09PSBhcHBJZCkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgc2VwYXJhdGUgYnVuZGxlSWQgJyR7ZGF0YS5idW5kbGVJZH0nIGAgK1xuICAgICAgICAgICAgICAgICAgICBgYWN0aW5nIGFzIHByb3h5IGZvciAnJHtidW5kbGVJZH0nLCB3aXRoIGFwcCBpZCAnJHtrZXl9J2ApO1xuICAgICAgICAgIHByb3hpZWRBcHBJZHMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF8udW5pcShwcm94aWVkQXBwSWRzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tQYXJhbXMgKHBhcmFtcykge1xuICAvLyBjaGVjayBpZiBhbGwgcGFyYW1ldGVycyBoYXZlIGEgdmFsdWVcbiAgY29uc3QgZXJyb3JzID0gXy50b1BhaXJzKHBhcmFtcylcbiAgICAuZmlsdGVyKChbLCB2YWx1ZV0pID0+IF8uaXNOaWwodmFsdWUpKVxuICAgIC5tYXAoKFtwYXJhbV0pID0+IHBhcmFtKTtcbiAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgJHt1dGlsLnBsdXJhbGl6ZSgncGFyYW1ldGVyJywgZXJyb3JzLmxlbmd0aCl9OiAke2Vycm9ycy5qb2luKCcsICcpfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVN0cmluZ2lmeSAodmFsdWUsIG11bHRpbGluZSA9IGZhbHNlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9XG5cbiAgLy8gd2UgZ2V0IGJhY2sgb2JqZWN0cyBzb21ldGltZXMgd2l0aCBzdHJpbmcgdmVyc2lvbnMgb2YgZnVuY3Rpb25zXG4gIC8vIHdoaWNoIG11ZGR5IHRoZSBsb2dzXG4gIGxldCBjbGVhblZhbHVlID0gXy5jbG9uZSh2YWx1ZSk7XG4gIGZvciAoY29uc3QgcHJvcGVydHkgb2YgWydjZWlsJywgJ2Nsb25lJywgJ2Zsb29yJywgJ3JvdW5kJywgJ3NjYWxlJywgJ3RvU3RyaW5nJ10pIHtcbiAgICBkZWxldGUgY2xlYW5WYWx1ZVtwcm9wZXJ0eV07XG4gIH1cbiAgcmV0dXJuIG11bHRpbGluZSA/IEpTT04uc3RyaW5naWZ5KGNsZWFuVmFsdWUsIG51bGwsIDIpIDogSlNPTi5zdHJpbmdpZnkoY2xlYW5WYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGRlZmVycmVkUHJvbWlzZSAoKSB7XG4gIC8vIGh0dHA6Ly9ibHVlYmlyZGpzLmNvbS9kb2NzL2FwaS9kZWZlcnJlZC1taWdyYXRpb24uaHRtbFxuICBsZXQgcmVzb2x2ZTtcbiAgbGV0IHJlamVjdDtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBCKChyZXMsIHJlaikgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcGFyYW0tbmFtZXNcbiAgICByZXNvbHZlID0gcmVzO1xuICAgIHJlamVjdCA9IHJlajtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcHJvbWlzZSxcbiAgICByZXNvbHZlLFxuICAgIHJlamVjdFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0UmVzdWx0IChyZXMpIHtcbiAgaWYgKF8uaXNVbmRlZmluZWQocmVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRGlkIG5vdCBnZXQgT0sgcmVzdWx0IGZyb20gcmVtb3RlIGRlYnVnZ2VyLiBSZXN1bHQgd2FzOiAke18udHJ1bmNhdGUoc2ltcGxlU3RyaW5naWZ5KHJlcyksIHtsZW5ndGg6IFJFU1BPTlNFX0xPR19MRU5HVEh9KX1gKTtcbiAgfSBlbHNlIGlmIChfLmlzU3RyaW5nKHJlcykpIHtcbiAgICB0cnkge1xuICAgICAgcmVzID0gSlNPTi5wYXJzZShyZXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gd2UgbWlnaHQgZ2V0IGEgc2VyaWFsaXplZCBvYmplY3QsIGJ1dCB3ZSBtaWdodCBub3RcbiAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCBpdCBpcyBqdXN0IGEgdmFsdWVcbiAgICB9XG4gIH0gZWxzZSBpZiAoIV8uaXNPYmplY3QocmVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgUmVzdWx0IGhhcyB1bmV4cGVjdGVkIHR5cGU6ICgke3R5cGVvZiByZXN9KS5gKTtcbiAgfVxuXG4gIGlmIChyZXMuc3RhdHVzICYmIHJlcy5zdGF0dXMgIT09IDApIHtcbiAgICAvLyB3ZSBnb3Qgc29tZSBmb3JtIG9mIGVycm9yLlxuICAgIHRocm93IGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlKHJlcy5zdGF0dXMsIHJlcy52YWx1ZS5tZXNzYWdlIHx8IHJlcy52YWx1ZSk7XG4gIH1cblxuICAvLyB3aXRoIGVpdGhlciBoYXZlIGFuIG9iamVjdCB3aXRoIGEgYHZhbHVlYCBwcm9wZXJ0eSAoZXZlbiBpZiBgbnVsbGApLFxuICAvLyBvciBhIHBsYWluIG9iamVjdFxuICBjb25zdCB2YWx1ZSA9IF8uaGFzKHJlcywgJ3ZhbHVlJykgPyByZXMudmFsdWUgOiByZXM7XG5cbiAgLy8gZ2V0IHJpZCBvZiBub2lzeSBmdW5jdGlvbnMgb24gb2JqZWN0c1xuICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIFsnY2VpbCcsICdjbG9uZScsICdmbG9vcicsICdyb3VuZCcsICdzY2FsZScsICd0b1N0cmluZyddKSB7XG4gICAgICBkZWxldGUgdmFsdWVbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB7XG4gIGFwcEluZm9Gcm9tRGljdCwgcGFnZUFycmF5RnJvbURpY3QsIGdldERlYnVnZ2VyQXBwS2V5LFxuICBnZXRQb3NzaWJsZURlYnVnZ2VyQXBwS2V5cywgY2hlY2tQYXJhbXMsIHNpbXBsZVN0cmluZ2lmeSwgZGVmZXJyZWRQcm9taXNlLFxuICBjb252ZXJ0UmVzdWx0LCBSRVNQT05TRV9MT0dfTEVOR1RILFxufTtcbiJdLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
