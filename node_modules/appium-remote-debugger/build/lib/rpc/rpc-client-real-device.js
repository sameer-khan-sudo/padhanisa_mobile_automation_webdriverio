"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }

  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion,
      isSimulator: false,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize,
      maxFrameLength: this.webInspectorMaxFrameLength
    });
    this.service.listenMessage(this.receive.bind(this));
    this.isConnected = true;
  }

  async disconnect() {
    if (!this.isConnected) {
      return;
    }

    _logger.default.debug('Disconnecting from remote debugger');

    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }

  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }

  async receive(data) {
    if (!this.isConnected) {
      return;
    }

    await this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMvcnBjLWNsaWVudC1yZWFsLWRldmljZS5qcyJdLCJuYW1lcyI6WyJScGNDbGllbnRSZWFsRGV2aWNlIiwiUnBjQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwic2hvdWxkQ2hlY2tGb3JUYXJnZXQiLCJ1ZGlkIiwiY29ubmVjdCIsInNlcnZpY2UiLCJzZXJ2aWNlcyIsInN0YXJ0V2ViSW5zcGVjdG9yU2VydmljZSIsIm9zVmVyc2lvbiIsInBsYXRmb3JtVmVyc2lvbiIsImlzU2ltdWxhdG9yIiwidmVyYm9zZSIsImxvZ0FsbENvbW11bmljYXRpb24iLCJ2ZXJib3NlSGV4RHVtcCIsImxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wIiwic29ja2V0Q2h1bmtTaXplIiwibWF4RnJhbWVMZW5ndGgiLCJ3ZWJJbnNwZWN0b3JNYXhGcmFtZUxlbmd0aCIsImxpc3Rlbk1lc3NhZ2UiLCJyZWNlaXZlIiwiYmluZCIsImlzQ29ubmVjdGVkIiwiZGlzY29ubmVjdCIsImxvZyIsImRlYnVnIiwiY2xvc2UiLCJzZW5kTWVzc2FnZSIsImNtZCIsImRhdGEiLCJtZXNzYWdlSGFuZGxlciIsImhhbmRsZU1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR2UsTUFBTUEsbUJBQU4sU0FBa0NDLGtCQUFsQyxDQUE0QztBQUN6REMsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCLFVBQU1DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2xCQyxNQUFBQSxvQkFBb0IsRUFBRTtBQURKLEtBQWQsRUFFSEgsSUFGRyxDQUFOO0FBSUEsVUFBTTtBQUNKSSxNQUFBQTtBQURJLFFBRUZKLElBRko7QUFJQSxTQUFLSSxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFWSxRQUFQQyxPQUFPLEdBQUk7QUFDZixTQUFLQyxPQUFMLEdBQWUsTUFBTUMsMEJBQVNDLHdCQUFULENBQWtDLEtBQUtKLElBQXZDLEVBQTZDO0FBQ2hFSyxNQUFBQSxTQUFTLEVBQUUsS0FBS0MsZUFEZ0Q7QUFFaEVDLE1BQUFBLFdBQVcsRUFBRSxLQUZtRDtBQUdoRUMsTUFBQUEsT0FBTyxFQUFFLEtBQUtDLG1CQUhrRDtBQUloRUMsTUFBQUEsY0FBYyxFQUFFLEtBQUtDLDBCQUoyQztBQUtoRUMsTUFBQUEsZUFBZSxFQUFFLEtBQUtBLGVBTDBDO0FBTWhFQyxNQUFBQSxjQUFjLEVBQUUsS0FBS0M7QUFOMkMsS0FBN0MsQ0FBckI7QUFTQSxTQUFLWixPQUFMLENBQWFhLGFBQWIsQ0FBMkIsS0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUNEOztBQUVlLFFBQVZDLFVBQVUsR0FBSTtBQUNsQixRQUFJLENBQUMsS0FBS0QsV0FBVixFQUF1QjtBQUNyQjtBQUNEOztBQUVERSxvQkFBSUMsS0FBSixDQUFVLG9DQUFWOztBQUNBLFVBQU0sTUFBTUYsVUFBTixFQUFOO0FBQ0EsU0FBS2pCLE9BQUwsQ0FBYW9CLEtBQWI7QUFDQSxTQUFLSixXQUFMLEdBQW1CLEtBQW5CO0FBQ0Q7O0FBRWdCLFFBQVhLLFdBQVcsQ0FBRUMsR0FBRixFQUFPO0FBQ3RCLFNBQUt0QixPQUFMLENBQWFxQixXQUFiLENBQXlCQyxHQUF6QjtBQUNEOztBQUVZLFFBQVBSLE9BQU8sQ0FBRVMsSUFBRixFQUFRO0FBQ25CLFFBQUksQ0FBQyxLQUFLUCxXQUFWLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBQ0QsVUFBTSxLQUFLUSxjQUFMLENBQW9CQyxhQUFwQixDQUFrQ0YsSUFBbEMsQ0FBTjtBQUNEOztBQS9Dd0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgUnBjQ2xpZW50IGZyb20gJy4vcnBjLWNsaWVudCc7XG5pbXBvcnQgeyBzZXJ2aWNlcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBScGNDbGllbnRSZWFsRGV2aWNlIGV4dGVuZHMgUnBjQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe1xuICAgICAgc2hvdWxkQ2hlY2tGb3JUYXJnZXQ6IGZhbHNlLFxuICAgIH0sIG9wdHMpKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHVkaWQsXG4gICAgfSA9IG9wdHM7XG5cbiAgICB0aGlzLnVkaWQgPSB1ZGlkO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCAoKSB7XG4gICAgdGhpcy5zZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRXZWJJbnNwZWN0b3JTZXJ2aWNlKHRoaXMudWRpZCwge1xuICAgICAgb3NWZXJzaW9uOiB0aGlzLnBsYXRmb3JtVmVyc2lvbixcbiAgICAgIGlzU2ltdWxhdG9yOiBmYWxzZSxcbiAgICAgIHZlcmJvc2U6IHRoaXMubG9nQWxsQ29tbXVuaWNhdGlvbixcbiAgICAgIHZlcmJvc2VIZXhEdW1wOiB0aGlzLmxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wLFxuICAgICAgc29ja2V0Q2h1bmtTaXplOiB0aGlzLnNvY2tldENodW5rU2l6ZSxcbiAgICAgIG1heEZyYW1lTGVuZ3RoOiB0aGlzLndlYkluc3BlY3Rvck1heEZyYW1lTGVuZ3RoLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXJ2aWNlLmxpc3Rlbk1lc3NhZ2UodGhpcy5yZWNlaXZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgZGlzY29ubmVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nLmRlYnVnKCdEaXNjb25uZWN0aW5nIGZyb20gcmVtb3RlIGRlYnVnZ2VyJyk7XG4gICAgYXdhaXQgc3VwZXIuZGlzY29ubmVjdCgpO1xuICAgIHRoaXMuc2VydmljZS5jbG9zZSgpO1xuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlIChjbWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5zZXJ2aWNlLnNlbmRNZXNzYWdlKGNtZCk7XG4gIH1cblxuICBhc3luYyByZWNlaXZlIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IHRoaXMubWVzc2FnZUhhbmRsZXIuaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvcnBjL3JwYy1jbGllbnQtcmVhbC1kZXZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
