"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const editJsonFile = require('edit-json-file');
const node_html_parser_1 = require("node-html-parser");
const { v4: uuidv4 } = require('uuid');
const logger_js_1 = __importDefault(require("./logger.js"));
const constants_1 = require("./constants");
function getSessionFilePath(sessionId) {
    return __awaiter(this, void 0, void 0, function* () {
        return `${constants_1.reportPath}/${sessionId}.json`;
    });
}
function initReport(driver) {
    var _a, _b, _c, _d, _e, _f, _g;
    return __awaiter(this, void 0, void 0, function* () {
        const deviceDetails = {};
        let sessionId;
        try {
            sessionId = driver.sessionId;
            const caps = yield driver.getSession();
            deviceDetails['platformName'] = (_a = caps.platformName) !== null && _a !== void 0 ? _a : undefined;
            deviceDetails['deviceModel'] = (_b = caps.deviceModel) !== null && _b !== void 0 ? _b : undefined;
            deviceDetails['deviceManufacturer'] = (_c = caps.deviceManufacturer) !== null && _c !== void 0 ? _c : undefined;
            deviceDetails['deviceApiLevel'] = (_d = caps.deviceApiLevel) !== null && _d !== void 0 ? _d : undefined;
            deviceDetails['platformVersion'] = (_e = caps.platformVersion) !== null && _e !== void 0 ? _e : undefined;
            deviceDetails['deviceName'] = (_f = caps.deviceName) !== null && _f !== void 0 ? _f : undefined;
            deviceDetails['deviceUDID'] = (_g = caps.deviceUDID) !== null && _g !== void 0 ? _g : undefined;
            if (deviceDetails['platformName'].toLowerCase() === 'ios') {
                deviceDetails['deviceManufacturer'] = 'APPLE';
                deviceDetails['deviceModel'] = deviceDetails['deviceName'];
            }
            yield createReportFile(sessionId, deviceDetails);
        }
        catch (err) {
            logger_js_1.default.error(err);
            logger_js_1.default.error(`Failed to extract sessionId & capabilities from driver Object: \n ${JSON.stringify(driver)}`);
            throw err;
        }
    });
}
function createReportFile(sessionId, deviceDetails) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (sessionId && sessionId.length > 0) {
                let filePath = yield getSessionFilePath(sessionId);
                let file = yield editJsonFile(filePath);
                yield file.set('sessionId', sessionId);
                yield file.set('deviceInfo', deviceDetails);
                yield file.save();
                logger_js_1.default.info(`Data file for session ${sessionId} created at ${filePath}`);
            }
            else {
                logger_js_1.default.error(`Failed to create session data file for session ${sessionId}`);
                throw 'Report creation failed because of invalid session ID';
            }
        }
        catch (e) {
            logger_js_1.default.error(`Error in creating session data file for session ${sessionId} \\n ${e}`);
            throw e;
        }
    });
}
function getTestStatus(status) {
    return __awaiter(this, void 0, void 0, function* () {
        status = status.toUpperCase();
        if (['PASS', 'PASSED'].includes(status))
            return 'PASSED';
        else if (['FAIL', 'FAILED'].includes(status))
            return 'FAILED';
        else if (['PENDING', 'WIP'].includes(status))
            return 'PENDING';
        else
            return 'UNKNOWN';
    });
}
function setTestInfo(sessionId, testName, testStatus, error = undefined) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const tid = yield uuidv4();
            if (sessionId !== undefined && sessionId !== null && sessionId !== 'null') {
                const oldFileName = yield getSessionFilePath(sessionId);
                const newFileName = yield getSessionFilePath(tid);
                yield fs.renameSync(oldFileName, newFileName);
            }
            else if (sessionId === undefined || sessionId === null) {
                sessionId = yield uuidv4();
                logger_js_1.default.info(`SessionId is null/undefined. Handling it by creating uuid (${sessionId}) to track test information`);
            }
            let file = yield editJsonFile(constants_1.jsonReportPath);
            const info = {};
            info['testName'] = testName;
            info['testStatus'] = yield getTestStatus(testStatus);
            logger_js_1.default.info(`${sessionId}: Test Status and Name are recorded`);
            if (error !== undefined && error !== null && error !== 'null') {
                info['error'] = error;
                logger_js_1.default.info(`${sessionId}: Test error is recorded`);
            }
            info['sessionId'] = sessionId;
            info['testId'] = tid;
            logger_js_1.default.info(`${sessionId}: Test sessionId and testId are recorded`);
            yield file.append('tests', info);
            yield file.save();
            return { status: 200, content: 'Test information saved' };
        }
        catch (error) {
            const content = `${sessionId}: Failed to Save test information ${error}`;
            logger_js_1.default.error(content);
            return { 'status': 500, 'content': content };
        }
    });
}
function setCmdData(driver, key, value, args) {
    return __awaiter(this, void 0, void 0, function* () {
        let filePath = yield getSessionFilePath(driver.sessionId);
        if (!fs.existsSync(filePath)) {
            yield initReport(driver);
        }
        let file = yield editJsonFile(filePath);
        const cmdId = yield uuidv4();
        file.set(`data.${key + cmdId}.img`, `${value}`);
        file.set(`data.${key + cmdId}.args`, args);
        yield file.append('cmd', [key, cmdId]);
        yield file.save();
    });
}
function buildReport() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let file = yield editJsonFile(constants_1.jsonReportPath);
            let allData = yield file.toObject();
            allData.sessions = {};
            if (allData.tests === null || allData.tests === undefined || allData.tests.length === 0) {
                throw 'Report file doesnt have any test information!';
            }
            const testIds = allData.tests.map(y => [y.testId, y.sessionId]);
            for (let i = 0; i < testIds.length; i++) {
                const testId = testIds[i][0];
                const sessionFilePath = `${constants_1.reportPath}/${testId}.json`;
                const sessionData = yield editJsonFile(sessionFilePath);
                allData.sessions[testId] = sessionData.toObject();
            }
            const htmlTemplate = yield fs.readFileSync(constants_1.htmlTemplatePath, 'utf8');
            let dom = yield (0, node_html_parser_1.parse)(htmlTemplate);
            const bundlejs = yield fs.readFileSync(constants_1.bundlePath, 'utf8');
            const dataScript = `<script>
      const data = ${JSON.stringify(allData)};
      ${bundlejs} </script>`;
            dom.getElementById('root').innerHTML = dataScript;
            const status = 200;
            const content = dom.toString();
            return { 'status': status, 'content': content };
        }
        catch (err) {
            const errorMessage = `Error building report: ${err}. 
    Please make sure "/setTestInfo" is called before "/getReport". 
    refer: https://github.com/AppiumTestDistribution/appium-reporter-plugin#mappings--commands`;
            logger_js_1.default.error(errorMessage);
            const status = 500;
            const content = errorMessage;
            return { 'status': status, 'content': content };
        }
    });
}
module.exports = {
    getSessionFilePath,
    setCmdData,
    buildReport,
    setTestInfo,
    initReport
};
