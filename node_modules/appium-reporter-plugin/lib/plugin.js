"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportPlugin = void 0;
const plugin_1 = require("appium/plugin");
const sharp_1 = __importDefault(require("sharp"));
const reporter_1 = __importDefault(require("./reporter"));
const prettyHrtime = require('pretty-hrtime');
const logger_js_1 = __importDefault(require("./logger.js"));
const constants_1 = require("./constants");
const fs = require('fs');
const fs_extra_1 = __importDefault(require("fs-extra"));
class ReportPlugin extends plugin_1.BasePlugin {
    constructor(pluginName) {
        super(pluginName);
    }
    static updateServer(expressApp) {
        return __awaiter(this, void 0, void 0, function* () {
            expressApp.get('/getReport', yield ReportPlugin.getReport);
            expressApp.delete('/deleteReportData', yield ReportPlugin.deleteReportData);
            expressApp.post('/setTestInfo', yield ReportPlugin.setTestInfo);
        });
    }
    static getReport(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_js_1.default.info('In getReport');
            const report = yield reporter_1.default.buildReport();
            res.status(report.status).send(report.content);
        });
    }
    static deleteReportData(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (yield fs.existsSync(constants_1.reportPath)) {
                    yield fs_extra_1.default.emptyDirSync(constants_1.reportPath);
                    logger_js_1.default.info(`${constants_1.reportPath} is deleted.`);
                }
                res.status(200).send();
            }
            catch (error) {
                logger_js_1.default.error(` Error in deleteing deleteReportData: ${error}`);
                res.status(500).send(error);
            }
        });
    }
    static setTestInfo(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let body = req.body;
            let sessionId = body.sessionId;
            let error = body.error;
            let testName = body.testName;
            let testStatus = body.testStatus;
            logger_js_1.default.info(`In setTestInfo with ${JSON.stringify(req.body)}`);
            const response = yield reporter_1.default.setTestInfo(sessionId, testName, testStatus, error);
            res.status(response.status).send(response.content);
        });
    }
    createSession(next) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield next();
            return result;
        });
    }
    handle(next, driver, commandName, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            if (driver === null || driver.sessionId === null) {
                logger_js_1.default.info(`driver or session is null. Bypassing the screenshotting process for the command ${commandName}`);
                result = yield next();
            }
            else {
                logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; processing command: ${commandName}`);
                const start = process.hrtime();
                let data = {};
                data['sessionId'] = driver.sessionId;
                if (args)
                    data['request'] = args;
                try {
                    result = yield next();
                }
                catch (e) {
                    logger_js_1.default.error(`error in executing command ${commandName} \n ${e.message}`);
                    data['error'] = e.message;
                }
                if (result)
                    data['response'] = result;
                const end = process.hrtime(start);
                const commandExecTime = prettyHrtime(end);
                logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; time taken by  appium for cmd execution: ${commandExecTime}`);
                data['execution time'] = commandExecTime;
                let img;
                if (!constants_1.cmdExclusionList.includes(commandName.toLowerCase())) {
                    logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; Command not in exlusion list for screenshot`);
                    const beforeScreenshot = process.hrtime();
                    let base64screenshot;
                    try {
                        base64screenshot = yield driver.getScreenshot();
                    }
                    catch (err) {
                        logger_js_1.default.error(`session: ${driver.sessionId}; cmd ${commandName}; Failed to take screenshot`);
                        logger_js_1.default.error(err);
                    }
                    const afterScreenshot = process.hrtime(beforeScreenshot);
                    logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; time appium took for screenshot: ${prettyHrtime(afterScreenshot)}`);
                    const beforeimgProcess = process.hrtime();
                    if (base64screenshot) {
                        const buffer = base64screenshot.split(';base64,').pop();
                        let imgBuffer = Buffer.from(buffer, 'base64');
                        let meta = yield (0, sharp_1.default)(imgBuffer).metadata();
                        img = yield (0, sharp_1.default)(imgBuffer);
                        if (meta.width > 500) {
                            img = yield img.resize(500);
                        }
                        img = yield img
                            .toFormat('jpeg', { mozjpeg: true })
                            .toBuffer()
                            .then((data) => {
                            return data.toString('base64');
                        })
                            .catch((err) => {
                            logger_js_1.default.error(`downsize issue ${err}`);
                            return null;
                        });
                        img = `data:image/jpeg;base64, ${img}`;
                    }
                    const afterimgProcess = process.hrtime(beforeimgProcess);
                    logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; time took to process image: ${prettyHrtime(afterimgProcess)}`);
                    const beforeWriteToFile = process.hrtime();
                    yield reporter_1.default.setCmdData(driver, commandName, img, data);
                    const afterWriteToFile = process.hrtime(beforeWriteToFile);
                    logger_js_1.default.info(`session: ${driver.sessionId}; cmd ${commandName}; Time taken by plugin to store data: ${prettyHrtime(afterWriteToFile)}`);
                }
            }
            return result;
        });
    }
}
exports.ReportPlugin = ReportPlugin;
