"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppiumOcrPlugin = exports.OCR_CONTEXT = void 0;
const plugin_1 = require("appium/plugin");
const sharp_1 = __importDefault(require("sharp"));
const tesseract_js_1 = require("tesseract.js");
const path_1 = __importDefault(require("path"));
const commands_1 = require("./commands");
// Tesseract allows language codes to prime the OCR engine. Set the default to just English. Can be
// overridden with the 'ocrLanguage' driver setting
const DEFAULT_LANG = 'eng';
// cache trained data in the build dir
const CACHE_PATH = path_1.default.resolve(__dirname);
// Sometimes the screenshot a platform returns can have a different number of pixels than the
// reported screen dimensions. We need screenshot pixels and screen pixels to match so that when we
// go to construct actions based on OCR locations from the screenshot, the screen locations for the
// actions are correct. The number here is "how many times bigger is the screenshot than the
// reported screen dimensions". These values can be overridden by the 'ocrShotToScreenRatio' driver
// setting
const SHOT_TO_SCREEN_RATIOS = {
    ios: 3.12,
    android: 1.0,
};
// The OCR process is much slower the bigger the screenshot is, so set some defaults for how much
// we want to downsample the screenshot to make things faster. The number here represents "by what
// factor should we reduce the dimension?" These values can be overridden by the
// 'ocrDownsampleFactor' driver setting. A value of null means "don't reduce"
const DOWNSAMPLE_FACTORS = {
    ios: SHOT_TO_SCREEN_RATIOS.ios,
    android: null,
};
const DEFAULT_CONTRAST = 0.5;
exports.OCR_CONTEXT = 'OCR';
class AppiumOcrPlugin extends plugin_1.BasePlugin {
    constructor(name) {
        super(name);
        this.isInOcrContext = false;
        this.isWorkerReady = false;
        this.shouldAvoidProxy = commands_1.shouldAvoidProxy;
        this.getContexts = commands_1.getContexts;
        this.getCurrentContext = commands_1.getCurrentContext;
        this.setContext = commands_1.setContext;
        this.getPageSource = commands_1.getPageSource;
        this.ocrElementGuard = commands_1.ocrElementGuard;
        this.click = commands_1.click;
        this.getSize = commands_1.getSize;
        this.elementDisplayed = commands_1.elementDisplayed;
        this.getLocation = commands_1.getLocation;
        this.getElementRect = commands_1.getElementRect;
        this.getText = commands_1.getText;
        this.getAttribute = commands_1.getAttribute;
        this.findElement = commands_1.findElement;
        this.findElements = commands_1.findElements;
        this._find = commands_1._find;
        this.ocrElements = {};
    }
    readyWorker(driver) {
        return __awaiter(this, void 0, void 0, function* () {
            this.worker = yield (0, tesseract_js_1.createWorker)({
                logger: x => this.logger.debug(JSON.stringify(x)),
                cachePath: CACHE_PATH,
            });
            let lang = driver.settings.getSettings().ocrLanguage;
            let validChars = driver.settings.getSettings().ocrValidChars;
            lang = lang || DEFAULT_LANG;
            validChars = validChars || '';
            yield this.worker.loadLanguage(lang);
            yield this.worker.initialize(lang);
            yield this.worker.setParameters({
                tessedit_pageseg_mode: tesseract_js_1.PSM.SPARSE_TEXT,
                tessedit_char_whitelist: validChars
            });
            this.isWorkerReady = true;
        });
    }
    getOcrDataFromResponse(data, shotToScreenRatio) {
        var _a;
        function extractFields(dataSource) {
            return dataSource.map((s) => ({
                text: s.text,
                confidence: s.confidence,
                bbox: {
                    x0: s.bbox.x0 / shotToScreenRatio,
                    y0: s.bbox.y0 / shotToScreenRatio,
                    x1: s.bbox.x1 / shotToScreenRatio,
                    y1: s.bbox.y1 / shotToScreenRatio,
                }
            }));
        }
        return {
            words: extractFields(data.words),
            lines: extractFields(data.lines),
            blocks: extractFields((_a = data.blocks) !== null && _a !== void 0 ? _a : []),
        };
    }
    getOcrText(_, driver) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!driver.getScreenshot) {
                throw new Error(`This type of driver does not have a screenshot command defined; ` +
                    `screenshot taking is necessary for this plugin to work!`);
            }
            if (!driver.opts.platformName) {
                throw new Error(`Driver did not have platformName capability/opt defined`);
            }
            const platform = driver.opts.platformName.toLowerCase();
            const b64Screenshot = yield driver.getScreenshot();
            let image = Buffer.from(b64Screenshot, 'base64');
            let sharpImage = (0, sharp_1.default)(image);
            let shotToScreenRatio = driver.settings.getSettings().ocrShotToScreenRatio ||
                SHOT_TO_SCREEN_RATIOS[platform] ||
                1.0;
            this.logger.info(`Using ${shotToScreenRatio} as the screenshot-to-screen size ratio`);
            const downsampleFactor = driver.settings.getSettings().ocrDownsampleFactor ||
                DOWNSAMPLE_FACTORS[platform] ||
                null;
            const shouldInvertColors = driver.settings.getSettings().ocrInvertColors ||
                false;
            const contrast = driver.settings.getSettings().ocrContrast ||
                DEFAULT_CONTRAST;
            // convert to grayscale and apply contrast to make it easier for tesseract
            sharpImage = sharpImage.greyscale().linear(contrast, -(128 * contrast) + 128);
            if (shouldInvertColors) {
                sharpImage = sharpImage.negate();
            }
            if (downsampleFactor && downsampleFactor !== 1) {
                this.logger.info(`Using downsample factor of ${downsampleFactor}`);
                const { width: curWidth, height: curHeight } = yield sharpImage.metadata();
                if (!curWidth || !curHeight) {
                    throw new Error(`Could not get width/height metadata from image`);
                }
                const newWidth = Math.round(curWidth / downsampleFactor);
                const newHeight = Math.round(curHeight / downsampleFactor);
                this.logger.info(`Resizing image from ${curWidth}x${curHeight} to ${newWidth}x${newHeight}`);
                const resizedImage = sharpImage.resize(newWidth, newHeight); // convert to ints
                image = yield resizedImage.toBuffer();
                shotToScreenRatio = shotToScreenRatio / downsampleFactor;
                this.logger.info(`Adjusting screenshot-to-screen size ratio to ${shotToScreenRatio} to account for downsampling`);
            }
            if (!this.isWorkerReady) {
                yield this.readyWorker(driver);
            }
            if (!this.worker) {
                throw new Error(`OCR worker was not initialized`);
            }
            const { data } = yield this.worker.recognize(image);
            return this.getOcrDataFromResponse(data, shotToScreenRatio);
        });
    }
    deleteSession(next) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.worker) {
                    yield this.worker.terminate();
                }
            }
            finally {
                yield next();
            }
        });
    }
    ocrContextGuard(next, fn) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInOcrContext) {
                return yield next();
            }
            return yield fn();
        });
    }
}
exports.AppiumOcrPlugin = AppiumOcrPlugin;
AppiumOcrPlugin.newMethodMap = {
    '/session/:sessionId/appium/ocr': {
        POST: {
            command: 'getOcrText',
            payloadParams: {
                required: [],
                optional: []
            },
            neverProxy: true,
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBRTFDLGtEQUEwQjtBQUMxQiwrQ0FBdUY7QUFDdkYsZ0RBQXVCO0FBQ3ZCLHlDQWlCbUI7QUFHbkIsbUdBQW1HO0FBQ25HLG1EQUFtRDtBQUNuRCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUE7QUFFMUIsc0NBQXNDO0FBQ3RDLE1BQU0sVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFMUMsNkZBQTZGO0FBQzdGLG1HQUFtRztBQUNuRyxtR0FBbUc7QUFDbkcsNEZBQTRGO0FBQzVGLG1HQUFtRztBQUNuRyxVQUFVO0FBQ1YsTUFBTSxxQkFBcUIsR0FBMkI7SUFDbEQsR0FBRyxFQUFFLElBQUk7SUFDVCxPQUFPLEVBQUUsR0FBRztDQUNmLENBQUE7QUFFRCxpR0FBaUc7QUFDakcsa0dBQWtHO0FBQ2xHLGdGQUFnRjtBQUNoRiw2RUFBNkU7QUFDN0UsTUFBTSxrQkFBa0IsR0FBa0M7SUFDdEQsR0FBRyxFQUFFLHFCQUFxQixDQUFDLEdBQUc7SUFDOUIsT0FBTyxFQUFFLElBQUk7Q0FDaEIsQ0FBQTtBQUVELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFBO0FBRWYsUUFBQSxXQUFXLEdBQUcsS0FBSyxDQUFBO0FBZ0JoQyxNQUFhLGVBQWdCLFNBQVEsbUJBQVU7SUF3QjNDLFlBQVksSUFBWTtRQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUF0QmYsbUJBQWMsR0FBRyxLQUFLLENBQUE7UUFDdEIsa0JBQWEsR0FBRyxLQUFLLENBQUE7UUFHckIscUJBQWdCLEdBQUcsMkJBQWdCLENBQUE7UUFDbkMsZ0JBQVcsR0FBRyxzQkFBVyxDQUFBO1FBQ3pCLHNCQUFpQixHQUFHLDRCQUFpQixDQUFBO1FBQ3JDLGVBQVUsR0FBRyxxQkFBVSxD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