"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../..");
const earl_1 = require("earl");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const SETTINGS = {};
const SCREEN_FIXTURE = path_1.default.resolve(__dirname, '..', '..', '..', 'fixtures', 'screen.png');
function getFakeDriver({ settings = SETTINGS } = {}) {
    return {
        settings: {
            getSettings() {
                return settings;
            },
        },
        opts: {
            platformName: 'iOS',
        },
        getScreenshot() {
            return __awaiter(this, void 0, void 0, function* () {
                const screen = yield promises_1.default.readFile(SCREEN_FIXTURE);
                return screen.toString('base64');
            });
        }
    };
}
describe('AppiumOcrPlugin', function () {
    it('should ready a worker', function () {
        return __awaiter(this, void 0, void 0, function* () {
            (0, earl_1.expect)(__1.AppiumOcrPlugin).toBeTruthy();
            const p = new __1.AppiumOcrPlugin('foo');
            (0, earl_1.expect)(p.isWorkerReady).toEqual(false);
            const d = getFakeDriver();
            yield p.readyWorker(d);
            (0, earl_1.expect)(p.isWorkerReady).toEqual(true);
            if (p.worker) {
                yield p.worker.terminate();
            }
        });
    });
    it('should process a screenshot', function () {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const p = new __1.AppiumOcrPlugin('test');
            const d = getFakeDriver();
            const { words } = yield p.getOcrText(() => __awaiter(this, void 0, void 0, function* () { }), d);
            const echoBoxWords = words.filter((w) => w.text === 'EchoBox');
            const echoBoxWord = echoBoxWords[0];
            (0, earl_1.expect)(echoBoxWord).toBeTruthy();
            (0, earl_1.expect)(echoBoxWord.confidence).toBeGreaterThan(70);
            yield ((_a = p.worker) === null || _a === void 0 ? void 0 : _a.terminate());
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXNwZWNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rlc3QvdW5pdC9wbHVnaW4tc3BlY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBdUM7QUFDdkMsK0JBQTZCO0FBQzdCLDJEQUE2QjtBQUM3QixnREFBd0I7QUFHeEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQTtBQUUxRixTQUFTLGFBQWEsQ0FBQyxFQUFDLFFBQVEsR0FBRyxRQUFRLEVBQUMsR0FBRyxFQUFFO0lBQzdDLE9BQU87UUFDSCxRQUFRLEVBQUU7WUFDTixXQUFXO2dCQUNQLE9BQU8sUUFBUSxDQUFBO1lBQ25CLENBQUM7U0FDSjtRQUNELElBQUksRUFBRTtZQUNGLFlBQVksRUFBRSxLQUFLO1NBQ3RCO1FBQ0ssYUFBYTs7Z0JBQ2YsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtnQkFDaEQsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3BDLENBQUM7U0FBQTtLQUN5QixDQUFBO0FBQ2xDLENBQUM7QUFFRCxRQUFRLENBQUMsaUJBQWlCLEVBQUU7SUFDeEIsRUFBRSxDQUFDLHVCQUF1QixFQUFFOztZQUN4QixJQUFBLGFBQU0sRUFBQyxtQkFBZSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDcEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxtQkFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BDLElBQUEsYUFBTSxFQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEMsTUFBTSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUE7WUFDekIsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLElBQUEsYUFBTSxFQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDckMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTthQUM3QjtRQUNMLENBQUM7S0FBQSxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsNkJBQTZCLEVBQUU7OztZQUM5QixNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFlLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDckMsTUFBTSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUE7WUFDekIsTUFBTSxFQUFDLEtBQUssRUFBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFTLEVBQUUsZ0RBQUUsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDckQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQTtZQUM5RCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbkMsSUFBQSxhQUFNLEVBQUMsV0FBVyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDaEMsSUFBQSxhQUFNLEVBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNsRCxNQUFNLENBQUEsTUFBQSxDQUFDLENBQUMsTUFBTSwwQ0FBRSxTQUFTLEVBQUUsQ0FBQSxDQUFBOztLQUM5QixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQSJ9