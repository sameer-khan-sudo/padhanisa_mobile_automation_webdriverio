"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../..");
const webdriverio_1 = require("webdriverio");
const webdriver_1 = require("webdriver");
const earl_1 = require("earl");
const TEST_APP_PATH = process.env.TEST_APP_PATH;
const TEST_PLATFORM = process.env.TEST_PLATFORM || 'iOS';
if (!TEST_APP_PATH) {
    throw new Error(`Must define TEST_APP_PATH`);
}
let capabilities = {
    'appium:noReset': true,
    'appium:app': TEST_APP_PATH,
};
if (TEST_PLATFORM === 'iOS') {
    capabilities = Object.assign(Object.assign({}, capabilities), { platformName: 'iOS', 'appium:automationName': 'XCUITest', 'appium:platformVersion': '16.2', 'appium:deviceName': 'iPhone 14' });
}
else {
    capabilities = Object.assign(Object.assign({}, capabilities), { platformName: 'Android', 'appium:automationName': 'UiAutomator2', 'appium:deviceName': 'Android', 'appium:settings[ocrDownsampleFactor]': 2.43 });
}
const WDIO_PARAMS = {
    hostname: '127.0.0.1',
    port: 4723,
    path: '/',
    connectionRetryCount: 0,
    logLevel: 'silent',
    capabilities
};
function updateWdioBrowser(browser) {
    browser.addCommand('getOcrText', (0, webdriver_1.command)('POST', '/session/:sessionId/appium/ocr', {
        command: 'getOcrText',
        description: 'Get all OCR text',
        ref: '',
        variables: [],
        parameters: []
    }));
}
describe('AppiumOcrPlugin', function () {
    let driver;
    before(function () {
        return __awaiter(this, void 0, void 0, function* () {
            driver = (yield (0, webdriverio_1.remote)(WDIO_PARAMS));
            updateWdioBrowser(driver);
        });
    });
    it('should find texts via new endpoint', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield driver.$('~Login Screen').waitForExist({ timeout: 5000 });
            const ocr = yield driver.getOcrText();
            const lines = ocr.lines.filter((l) => l.text.includes('Login Screen'));
            (0, earl_1.expect)(lines).toHaveLength(1);
            (0, earl_1.expect)(lines[0].confidence).toBeGreaterThan(0);
            (0, earl_1.expect)(lines[0].bbox.x0).toBeGreaterThan(0);
            (0, earl_1.expect)(lines[0].bbox.x1).toBeGreaterThan(0);
            (0, earl_1.expect)(lines[0].bbox.y0).toBeGreaterThan(0);
            (0, earl_1.expect)(lines[0].bbox.y1).toBeGreaterThan(0);
        });
    });
    it('should add a new context to the context list', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const contexts = yield driver.getContexts();
            (0, earl_1.expect)(contexts).toInclude(__1.OCR_CONTEXT);
        });
    });
    describe('when in the ocr context', function () {
        before(function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield driver.switchContext(__1.OCR_CONTEXT);
            });
        });
        after(function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield driver.switchContext('NATIVE_APP');
            });
        });
        it('should get the ocr text in xml format', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const source = yield driver.getPageSource();
                (0, earl_1.expect)(source).toEqual(earl_1.expect.regex(/<OCR>/));
                (0, earl_1.expect)(source).toEqual(earl_1.expect.regex(/<words>/));
                (0, earl_1.expect)(source).toEqual(earl_1.expect.regex(/<lines>/));
            });
        });
        it('should find single ocr elements by xpath', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const el = yield driver.$('//lines/item[contains(text(), "Login Screen")]');
            });
        });
        it('should find multiple ocr elements by xpath', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const els = yield driver.$$('//lines/item[contains(text(), "Demo")]');
                (0, earl_1.expect)(els.length).toBeGreaterThan(4);
            });
        });
        it('should not find elements that do not exist', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const els = yield driver.$$('//item[contains(text(), "ZZZZ")]');
                (0, earl_1.expect)(els.length).toEqual(0);
            });
        });
        describe('with an element', function () {
            let el;
            const targetSize = {
                width: earl_1.expect.closeTo(95, 5),
                height: earl_1.expect.closeTo(16, 5)
            };
            const targetLoc = {
                x: earl_1.expect.closeTo(15, 5),
                y: earl_1.expect.closeTo(170, 5),
            };
            before(function () {
                return __awaiter(this, void 0, void 0, function* () {
                    el = yield driver.$('//lines/item[contains(text(), "Login Screen")]');
                });
            });
            it('should get displayed', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    (0, earl_1.expect)(yield el.isDisplayed()).toEqual(true);
                });
            });
            it('should get the size', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    (0, earl_1.expect)(yield el.getSize()).toEqual(targetSize);
                });
            });
            it('should get the location', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    (0, earl_1.expect)(yield el.getLocation()).toEqual(targetLoc);
                });
            });
            it('should get the rect', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    (0, earl_1.expect)(yield driver.getElementRect(el.elementId)).toEqual(Object.assign(Object.assign({}, targetSize), targetLoc));
                });
            });
            it('should get the text', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    (0, earl_1.expect)(yield el.getText()).toEqual(earl_1.expect.regex(/Login Screen/));
                });
            });
            it('should get the confidence attribute', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    const confidence = parseInt(yield el.getAttribute('confidence'), 10);
                    (0, earl_1.expect)(confidence).toBeGreaterThan(50);
                });
            });
            it('should click via w3c actions', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    yield el.click();
                    yield driver.switchContext('NATIVE_APP');
                    const username = yield driver.$('~username');
                    yield username.waitForExist({ timeout: 2000 });
                    yield driver.back();
                });
            });
        });
    });
    after(function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (driver) {
                yield driver.deleteSession();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWUyZS1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L2UyZS9wbHVnaW4tZTJlLXNwZWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsNkJBQWdEO0FBQ2hELDZDQUFvQztBQUVwQyx5Q0FBbUM7QUFDbkMsK0JBQTZCO0FBRTdCLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFBO0FBQy9DLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQTtBQUV4RCxJQUFJLENBQUMsYUFBYSxFQUFFO0lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtDQUMvQztBQU1ELElBQUksWUFBWSxHQUF1QjtJQUNuQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLFlBQVksRUFBRSxhQUFhO0NBQzlCLENBQUE7QUFFRCxJQUFJLGFBQWEsS0FBSyxLQUFLLEVBQUU7SUFDekIsWUFBWSxtQ0FDTCxZQUFZLEtBQ2YsWUFBWSxFQUFFLEtBQUssRUFDbkIsdUJBQXVCLEVBQUUsVUFBVSxFQUNuQyx3QkFBd0IsRUFBRSxNQUFNLEVBQ2hDLG1CQUFtQixFQUFFLFdBQVcsR0FDbkMsQ0FBQTtDQUNKO0tBQU07SUFDSCxZQUFZLG1DQUNMLFlBQVksS0FDZixZQUFZLEVBQUUsU0FBUyxFQUN2Qix1QkFBdUIsRUFBRSxjQUFjLEVBQ3ZDLG1CQUFtQixFQUFFLFNBQVMsRUFDOUIsc0NBQXNDLEVBQUUsSUFBSSxHQUMvQyxDQUFBO0NBQ0o7QUFFRCxNQUFNLFdBQVcsR0FBa0I7SUFDL0IsUUFBUSxFQUFFLFdBQVc7SUFDckIsSUFBSSxFQUFFLElBQUk7SUFDVixJQUFJLEVBQUUsR0FBRztJQUNULG9CQUFvQixFQUFFLENBQUM7SUFDdkIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsWUFBWTtDQUNmLENBQUE7QUFF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