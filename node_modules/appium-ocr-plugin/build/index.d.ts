import { BasePlugin } from 'appium/plugin';
import type { ExternalDriver } from '@appium/types';
import { Worker, Bbox, Page } from 'tesseract.js';
import { shouldAvoidProxy, getContexts, getCurrentContext, setContext, getPageSource, ocrElementGuard, click, elementDisplayed, getSize, getLocation, getElementRect, getText, getAttribute, findElement, findElements, _find } from './commands';
import { OCRElement } from './commands/element';
export declare const OCR_CONTEXT = "OCR";
export type NextHandler = () => Promise<any>;
export type OcrData = {
    text: string;
    confidence: number;
    bbox: Bbox;
};
export type OcrResponse = {
    words: OcrData[];
    lines: OcrData[];
    blocks: OcrData[];
};
export declare class AppiumOcrPlugin extends BasePlugin {
    worker?: Worker;
    isInOcrContext: boolean;
    isWorkerReady: boolean;
    ocrElements: {
        [id: string]: OCRElement;
    };
    shouldAvoidProxy: typeof shouldAvoidProxy;
    getContexts: typeof getContexts;
    getCurrentContext: typeof getCurrentContext;
    setContext: typeof setContext;
    getPageSource: typeof getPageSource;
    ocrElementGuard: typeof ocrElementGuard;
    click: typeof click;
    getSize: typeof getSize;
    elementDisplayed: typeof elementDisplayed;
    getLocation: typeof getLocation;
    getElementRect: typeof getElementRect;
    getText: typeof getText;
    getAttribute: typeof getAttribute;
    findElement: typeof findElement;
    findElements: typeof findElements;
    _find: typeof _find;
    constructor(name: string);
    static newMethodMap: {
        '/session/:sessionId/appium/ocr': {
            POST: {
                command: string;
                payloadParams: {
                    required: never[];
                    optional: never[];
                };
                neverProxy: boolean;
            };
        };
    };
    readyWorker(driver: ExternalDriver): Promise<void>;
    getOcrDataFromResponse(data: Page, shotToScreenRatio: number): OcrResponse;
    getOcrText(_: NextHandler, driver: ExternalDriver): Promise<OcrResponse>;
    deleteSession(next: NextHandler): Promise<void>;
    ocrContextGuard(next: NextHandler, fn: () => Promise<any>): Promise<any>;
}
