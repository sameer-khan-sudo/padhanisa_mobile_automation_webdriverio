"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseController = void 0;
const express_utils_1 = require("../utils/express-utils");
class BaseController {
    constructor() {
        this.getPaginationApiUrl = function (request, page) {
            let baseUrl = express_utils_1.ExpressUtils.getUrl(request), queryString = "?paginate=true";
            for (let param in request.query) {
                if (request.query.hasOwnProperty(param)) {
                    if (param == "page") {
                        queryString = `${queryString}&page=${page}`;
                    }
                    else if (param != "paginate") {
                        queryString = `${queryString}&${param}=${request.query[param]}`;
                    }
                }
            }
            return baseUrl + queryString;
        };
    }
    sendPaginatedResponse(result, request, response) {
        if (request.parsedQuery.paginate == true) {
            response.status(200).send({
                success: true,
                count: result.count,
                prev: this.getPreviousUrl(request, result.count),
                next: this.getNextUrl(request, result.count),
                result: result.rows,
            });
        }
        else {
            this.sendSuccessResponse(response, result.rows);
        }
    }
    sendSuccessResponse(response, result, statusCode = 200) {
        response.status(statusCode).send({
            success: true,
            result: result,
        });
    }
    sendFailureResponse(response, result, statusCode = 500) {
        response.status(statusCode).send({
            success: false,
            message: result,
        });
    }
    getNextUrl(request, count) {
        if (count <= parseInt(request.query.page) * parseInt(request.query.page_size)) {
            return null;
        }
        var nextPage = parseInt(request.query.page) + 1;
        return this.getPaginationApiUrl(request, nextPage);
    }
    getPreviousUrl(request, count) {
        if (parseInt(request.query.page) == 1 || count == 0) {
            return null;
        }
        let prevPage = parseInt(request.query.page) - 1;
        if (count <= parseInt(request.query.page_size)) {
            prevPage = 1;
        }
        return this.getPaginationApiUrl(request, prevPage);
    }
}
exports.BaseController = BaseController;
