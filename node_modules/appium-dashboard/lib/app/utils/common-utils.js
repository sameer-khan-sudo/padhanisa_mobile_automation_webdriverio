"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSessionFilterParams = exports.defer = void 0;
const sequelize_1 = require("sequelize");
function defer() {
    var resolve, reject;
    var promise = new Promise(function () {
        resolve = arguments[0];
        reject = arguments[1];
    });
    return {
        resolve: resolve,
        reject: reject,
        promise: promise,
    };
}
exports.defer = defer;
function parseSessionFilterParams(params) {
    let { start_time, name, os, status, device_udid } = params;
    let filters = [];
    if (start_time) {
        filters.push({ start_time: { [sequelize_1.Op.gte]: new Date(start_time) } });
    }
    if (name) {
        filters.push({
            [sequelize_1.Op.or]: [
                {
                    session_id: {
                        [sequelize_1.Op.like]: `%${name.trim()}%`,
                    },
                },
                {
                    name: {
                        [sequelize_1.Op.like]: `%${name.trim()}%`,
                    },
                },
            ],
        });
    }
    if (status) {
        filters.push({
            session_status: {
                [sequelize_1.Op.in]: status.split(",").map((entry) => entry.toUpperCase()),
            },
        });
    }
    if (device_udid) {
        filters.push(sequelize_1.Sequelize.where(sequelize_1.Sequelize.fn("LOWER", sequelize_1.Sequelize.col("udid")), device_udid.toLowerCase()));
    }
    if (os) {
        filters.push({
            platform_name: {
                [sequelize_1.Op.in]: os.split(",").map((entry) => entry.toUpperCase()),
            },
        });
    }
    return filters;
}
exports.parseSessionFilterParams = parseSessionFilterParams;
