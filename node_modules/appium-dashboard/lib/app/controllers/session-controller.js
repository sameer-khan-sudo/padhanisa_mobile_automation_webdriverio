"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionController = void 0;
const session_1 = require("../../models/session");
const sequelize_1 = require("sequelize");
const base_controller_1 = require("../commons/base-controller");
const fs_1 = __importDefault(require("fs"));
const models_1 = require("../../models");
const path = __importStar(require("path"));
const common_utils_1 = require("../utils/common-utils");
const mjpeg_proxy_1 = require("mjpeg-proxy");
class SessionController extends base_controller_1.BaseController {
    initializeRoutes(router, config) {
        router.get("/", this.getSessions.bind(this));
        router.get("/:sessionId", this.getSessionBySessionId.bind(this));
        router.delete("/:sessionId", (req, res, next) => this.deleteSession(req, res, next, config));
        router.delete("/", (req, res, next) => this.deleteAllSession(req, res, next, config));
        router.get("/:sessionId/log/:logId/screen-shot", this.getScreenShotForLog.bind(this));
        router.get("/:sessionId/video", this.getVideoForSession.bind(this));
        router.get("/:sessionId/video/download", this.downloadVideoForSession.bind(this));
        router.get("/:sessionId/logs/text", this.getTextLogs.bind(this));
        router.get("/:sessionId/logs/device", this.getDeviceLogs.bind(this));
        router.get("/:sessionId/logs/debug", this.getDebugLogs.bind(this));
        router.get("/:sessionId/profiling_data", this.getProfilingData.bind(this));
        router.get("/:sessionId/http_logs", this.getHttpLogs.bind(this));
        router.get("/:sessionId/live_video", this.getLiveVideo.bind(this));
    }
    getSessions(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = (0, common_utils_1.parseSessionFilterParams)(request.query);
            this.sendSuccessResponse(response, yield session_1.Session.findAndCountAll({
                where: {
                    [sequelize_1.Op.and]: filters,
                },
                order: [["start_time", "DESC"]],
            }));
        });
    }
    getSessionBySessionId(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            this.sendSuccessResponse(response, yield session_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            }));
        });
    }
    deleteAllSession(request, response, next, config) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessions = yield session_1.Session.findAll({
                where: {
                    session_status: {
                        [sequelize_1.Op.notIn]: ["RUNNING"],
                    },
                },
            });
            yield session_1.Session.destroy({
                where: {
                    session_status: {
                        [sequelize_1.Op.notIn]: ["RUNNING"],
                    },
                },
            });
            for (var session of sessions) {
                try {
                    if (session.video_path) {
                        fs_1.default.unlinkSync(session.video_path);
                    }
                    fs_1.default.rmdirSync(path.join(config.screenshotSavePath, session.session_id), { recursive: true });
                }
                catch (err) { }
            }
            this.sendSuccessResponse(response, {
                success: true,
            });
        });
    }
    deleteSession(request, response, next, config) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let session = yield session_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            });
            if (session && session.session_status != "RUNNING") {
                yield session.destroy();
                if (session.video_path) {
                    fs_1.default.unlinkSync(session.video_path);
                }
                fs_1.default.rmdirSync(path.join(config.screenshotSavePath, session.session_id), { recursive: true });
                this.sendSuccessResponse(response, {
                    success: true,
                });
            }
            else {
                this.sendFailureResponse(response, "Cannnot delete running session");
            }
        });
    }
    downloadVideoForSession(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let session = yield session_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            });
            const videoPath = session === null || session === void 0 ? void 0 : session.video_path;
            if (session && videoPath) {
                return response.download(videoPath);
            }
            else {
                this.sendFailureResponse(response, "Video not available");
            }
        });
    }
    getVideoForSession(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            const range = request.headers.range;
            let session = yield session_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            });
            const videoPath = session === null || session === void 0 ? void 0 : session.video_path;
            if (session && videoPath && range) {
                const videoSize = fs_1.default.statSync(videoPath).size;
                // Parse Range
                // Example: "bytes=32324-"
                const CHUNK_SIZE = 10 ** 6; // 1MB
                const start = Number(range.replace(/\D/g, ""));
                const end = Math.min(start + CHUNK_SIZE, videoSize - 1);
                // Create headers
                const contentLength = end - start + 1;
                const headers = {
                    "Content-Range": `bytes ${start}-${end}/${videoSize}`,
                    "Accept-Ranges": "bytes",
                    "Content-Length": contentLength,
                    "Content-Type": "video/mp4",
                };
                // HTTP Status 206 for Partial Content
                response.writeHead(206, headers);
                // create video read stream for this particular chunk
                const videoStream = fs_1.default.createReadStream(videoPath, { start, end });
                // Stream the video chunk to the client
                videoStream.pipe(response);
            }
            else {
                this.sendFailureResponse(response, "Video not available");
            }
        });
    }
    getTextLogs(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logs = yield models_1.CommandLogs.findAndCountAll({
                where: {
                    session_id: sessionId,
                },
            });
            this.sendSuccessResponse(response, logs);
        });
    }
    getDeviceLogs(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logs = yield models_1.Logs.findAndCountAll({
                where: {
                    session_id: sessionId,
                    log_type: "DEVICE",
                },
            });
            this.sendSuccessResponse(response, logs);
        });
    }
    getDebugLogs(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logs = yield models_1.Logs.findAndCountAll({
                where: {
                    session_id: sessionId,
                    log_type: "DEBUG",
                },
            });
            this.sendSuccessResponse(response, logs);
        });
    }
    getScreenShotForLog(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logId = request.params.logId;
            let log = yield models_1.CommandLogs.findOne({
                where: {
                    session_id: sessionId,
                    log_id: logId,
                },
            });
            if (log && log.screen_shot) {
                return response.status(200).sendFile(log.screen_shot);
            }
            this.sendFailureResponse(response, "Screen shot not available");
        });
    }
    getProfilingData(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logs = yield models_1.Profiling.findAll({
                attributes: [
                    "id",
                    "timestamp",
                    "cpu",
                    "memory",
                    "total_cpu_used",
                    "total_memory_used",
                    "raw_cpu_log",
                    "raw_memory_log",
                ],
                where: {
                    session_id: sessionId,
                },
                order: [["timestamp", "ASC"]],
            });
            this.sendSuccessResponse(response, logs);
        });
    }
    getHttpLogs(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let logs = yield models_1.HttpLogs.findAndCountAll({
                where: {
                    session_id: sessionId,
                },
                order: [["start_time", "ASC"]],
            });
            this.sendSuccessResponse(response, logs);
        });
    }
    getLiveVideo(request, response, next) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = request.params.sessionId;
            let session = yield session_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            });
            const proxyPort = session === null || session === void 0 ? void 0 : session.live_stream_port;
            if (!proxyPort) {
                return this.sendFailureResponse(response, { message: "Live stream not available" });
            }
            if (!SessionController.mjpegProxyCache.has(proxyPort)) {
                const url = `${request.protocol}://${request.hostname}:${proxyPort}`;
                SessionController.mjpegProxyCache.set(proxyPort, new mjpeg_proxy_1.MjpegProxy(url));
            }
            try {
                (_a = SessionController.mjpegProxyCache.get(proxyPort)) === null || _a === void 0 ? void 0 : _a.proxyRequest(request, response);
            }
            catch (e) {
                return this.sendFailureResponse(response, "Live video not available");
            }
        });
    }
}
exports.SessionController = SessionController;
SessionController.mjpegProxyCache = new Map();
