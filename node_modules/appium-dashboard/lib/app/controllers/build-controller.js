"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildController = void 0;
const sequelize_1 = require("sequelize");
const base_controller_1 = require("../commons/base-controller");
const build_1 = require("../../models/build");
const session_1 = require("../../models/session");
const common_utils_1 = require("../utils/common-utils");
const lodash_1 = __importDefault(require("lodash"));
const models_1 = require("../../models");
class BuildController extends base_controller_1.BaseController {
    initializeRoutes(router, config) {
        router.get("/", this.getBuilds.bind(this));
        router.get("/:builds/sessions", this.getSessionsForBuild.bind(this));
    }
    getBuilds(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let { created_at, name } = request.query;
            let filter = {};
            if (created_at) {
                filter.created_at = { [sequelize_1.Op.gte]: new Date(created_at) };
            }
            if (name) {
                filter.name = {
                    [sequelize_1.Op.like]: `%${name.trim()}%`,
                };
            }
            let builds = yield build_1.Build.findAndCountAll({
                where: filter,
                include: [
                    {
                        model: session_1.Session,
                        as: "sessions",
                        required: true,
                        where: (0, common_utils_1.parseSessionFilterParams)(lodash_1.default.pick(request.query, ["device_udid", "os"])),
                    },
                    {
                        model: models_1.Project,
                        as: "project",
                    },
                ],
                order: [["updated_at", "DESC"]],
            });
            builds.rows = JSON.parse(JSON.stringify(builds.rows)).map((build) => {
                let sessionInfo = {
                    total: build.sessions.length,
                    passed: build.sessions.filter((s) => { var _a; return ((_a = s.session_status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "passed"; }).length,
                    running: build.sessions.filter((s) => { var _a; return ((_a = s.session_status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "running"; }).length,
                    failed: build.sessions.filter((s) => { var _a; return ((_a = s.session_status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "failed"; }).length,
                    timeout: build.sessions.filter((s) => { var _a; return ((_a = s.session_status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "timeout"; }).length,
                };
                return lodash_1.default.assign({}, {
                    session: sessionInfo,
                    project_name: build.project.name,
                });
            });
            this.sendSuccessResponse(response, builds);
        });
    }
    getSessionsForBuild(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let buildId = request.params.builId;
            this.sendSuccessResponse(response, yield session_1.Session.findAndCountAll({
                where: {
                    build_id: buildId,
                },
            }));
        });
    }
}
exports.BuildController = BuildController;
