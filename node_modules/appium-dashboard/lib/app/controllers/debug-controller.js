"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugController = void 0;
const base_controller_1 = require("../commons/base-controller");
const common_utils_1 = require("../utils/common-utils");
const session_debug_map_1 = __importDefault(require("../../plugin/session-debug-map"));
const models_1 = require("../../models");
class DebugController extends base_controller_1.BaseController {
    constructor(debugEventEmitter) {
        super();
        this.debugEventEmitter = debugEventEmitter;
    }
    initializeRoutes(router, config) {
        router.use("/:sessionId/*", (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            let { sessionId } = request.params;
            let session = yield models_1.Session.findOne({
                where: {
                    session_id: sessionId,
                },
            });
            if (!session_debug_map_1.default.get(sessionId) || !session) {
                return this.sendFailureResponse(response, "Invalid sessionid");
            }
            if (session.is_completed) {
                return this.sendFailureResponse(response, "Cannot perform this operation for completed session");
            }
            return next();
        }));
        router.post("/:sessionId/execute_driver_script", this.executeDriverScript.bind(this));
        router.post("/:sessionId/:state", this.changeSessionState.bind(this));
    }
    triggerAndWaitForEvent(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const deferred = (0, common_utils_1.defer)();
            this.debugEventEmitter.emit(opts.sessionId, Object.assign(Object.assign({}, opts.eventObj), { callback: deferred.resolve }));
            return yield deferred.promise;
        });
    }
    changeSessionState(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let { sessionId, state } = request.params;
            if (!state.match("play|pause")) {
                return this.sendFailureResponse(response, "Invalid state. Supported states are play,pause");
            }
            yield this.triggerAndWaitForEvent({
                sessionId,
                eventObj: {
                    event: "change_state",
                    state,
                },
            });
            return this.sendSuccessResponse(response, "Changed session state");
        });
    }
    executeDriverScript(request, response, next) {
        return __awaiter(this, void 0, void 0, function* () {
            let { sessionId } = request.params;
            let { script } = request.body;
            if (!script) {
                return this.sendFailureResponse(response, "please provide a valid script to execute");
            }
            let output = yield this.triggerAndWaitForEvent({
                sessionId,
                eventObj: {
                    event: "execute_driver_script",
                    script,
                },
            });
            return this.sendSuccessResponse(response, output);
        });
    }
}
exports.DebugController = DebugController;
