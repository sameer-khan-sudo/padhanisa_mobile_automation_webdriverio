"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkLogsParser = void 0;
const lodash_1 = __importDefault(require("lodash"));
class NetworkLogsParser {
    constructor(context) {
        this.context = context;
        this.logs = {};
    }
    onRequestRecieved(event) {
        const { requestId } = event;
        this.logs[requestId] = Object.assign(Object.assign({}, this.getParsedRequest(event)), { response_received: false });
    }
    onResponseRecieved(event) {
        const { requestId } = event;
        if (this.logs[requestId]) {
            this.logs[requestId] = lodash_1.default.assign(this.logs[requestId], this.getParsedResponse(event), {
                response_received: true,
            });
        }
    }
    getLogs() {
        return Object.values(this.logs).filter((l) => l.response_received);
    }
    getParsedRequest(event) {
        let { request: { url, method, headers: request_headers, postData: request_post_data }, type: request_type, } = event;
        return {
            url,
            method,
            request_headers,
            request_post_data,
            request_content_type: request_post_data ? request_headers["Content-Type"] : undefined,
            request_type,
            context: this.context,
            start_time: new Date(),
        };
    }
    getParsedResponse(event) {
        let { response: { status: response_status, statusText: response_status_text, headers: response_headers, mimeType: response_content_type, remoteIPAddress: remote_ip_address, }, responseBody: response_body, } = event;
        return {
            response_status,
            response_status_text,
            response_headers,
            response_content_type,
            response_body,
            remote_ip_address,
            end_time: new Date(),
        };
    }
}
exports.NetworkLogsParser = NetworkLogsParser;
