"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppiumDashboardPlugin = void 0;
const typedi_1 = require("typedi");
const base_plugin_1 = __importDefault(require("@appium/base-plugin"));
const command_parser_1 = require("./command-parser");
const session_manager_1 = require("./session-manager");
const plugin_utils_1 = require("./utils/plugin-utils");
const plugin_logger_1 = require("../loggers/plugin-logger");
const logger_1 = require("../loggers/logger");
const debugger_1 = require("./debugger");
const lodash_1 = __importDefault(require("lodash"));
const get_port_1 = __importDefault(require("get-port"));
const sessionMap = new Map();
const IGNORED_COMMANDS = ["getScreenshot", "stopRecordingScreen", "startRecordingScreen"];
const CUSTOM_CAPABILITIES = [
    "newCommandTimeout",
    "dashboard:project",
    "dashboard:build",
    "dashboard:name",
    "dashboard:videoResolution",
    "dashboard:enableLiveVideo",
    "dashboard:enableVideoRecording",
];
class AppiumDashboardPlugin extends base_plugin_1.default {
    constructor(pluginName) {
        super(pluginName);
    }
    static get argsConstraints() {
        return {
            sessionTimeout: {
                isNumber: true,
            },
        };
    }
    static updateServer(expressApp) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, debugger_1.registerDebugMiddlware)(expressApp);
            expressApp.use("/dashboard", typedi_1.Container.get("expressRouter"));
            plugin_logger_1.pluginLogger.info("Dashboard plugin is enabled and will be served at http://localhost:4723/dashboard");
            plugin_logger_1.pluginLogger.info("If the appium server is started with different port other than 4723, then use the correct port number to access the device farm dashboard");
            logger_1.logger.info("Dashboard plugin enabled..");
        });
    }
    handle(next, driver, commandName, ...args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let appiumCommand = {
                driver,
                commandName,
                next,
                args,
            };
            let originalCommandName = commandName == "proxyReqRes" ? (0, plugin_utils_1.routeToCommand)(args).commandName : commandName;
            if (IGNORED_COMMANDS.indexOf(originalCommandName) >= 0) {
                logger_1.logger.info(`Skipped parsing command for ${originalCommandName}`);
                return yield next();
            }
            if (commandName == "createSession") {
                /**
                 * Append additional log capabilities to payload
                 */
                let rawCapabilities = Object.assign({}, args[2].firstMatch[0], args[2].alwaysMatch);
                yield this.constructDesiredCapabilities(args);
                var response = yield next();
                if (response.error) {
                    return response;
                }
                else {
                    let sessionInfo = (0, plugin_utils_1.getSessionDetails)(rawCapabilities, response);
                    let sessionManager = new session_manager_1.SessionManager({
                        sessionInfo,
                        commandParser: new command_parser_1.CommandParser(sessionInfo),
                        sessionResponse: response,
                        cliArgs: this.cliArgs,
                        adb: typedi_1.Container.get("adb"),
                    });
                    sessionMap.set(sessionInfo.session_id, sessionManager);
                    yield sessionManager.onCommandRecieved(appiumCommand);
                    logger_1.logger.info(`New Session created with session id ${sessionInfo.session_id}`);
                    return response;
                }
            }
            let sessionId = args[args.length - 1];
            if (sessionMap.has(sessionId)) {
                return yield ((_a = this.getSessionManager(sessionId)) === null || _a === void 0 ? void 0 : _a.onCommandRecieved(appiumCommand));
            }
            else {
                return yield next();
            }
        });
    }
    getSessionManager(sessionId) {
        return sessionMap.get(sessionId);
    }
    constructDesiredCapabilities(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!args[2].alwaysMatch) {
                return;
            }
            let rawCapabilities = Object.assign({}, args[2].firstMatch[0], args[2].alwaysMatch);
            const enableLiveVideo = lodash_1.default.isNil(rawCapabilities["dashboard:enableLiveVideo"])
                ? true
                : rawCapabilities["dashboard:enableLiveVideo"];
            CUSTOM_CAPABILITIES.forEach((capability) => {
                delete rawCapabilities[capability];
            });
            let newCapabilities = {
                "appium:clearDeviceLogsOnStart": true,
                "appium:nativeWebScreenshot": true, //to make screenshot endpoint work in android webview tests,
            };
            if ((rawCapabilities === null || rawCapabilities === void 0 ? void 0 : rawCapabilities["platformName"].toLowerCase()) == "android" &&
                !(rawCapabilities === null || rawCapabilities === void 0 ? void 0 : rawCapabilities["appium:mjpegServerPort"]) &&
                enableLiveVideo) {
                newCapabilities["appium:mjpegServerPort"] = yield (0, get_port_1.default)();
            }
            Object.keys(newCapabilities).forEach((k) => {
                args[2].alwaysMatch[k] = newCapabilities[k];
            });
        });
    }
}
exports.AppiumDashboardPlugin = AppiumDashboardPlugin;
