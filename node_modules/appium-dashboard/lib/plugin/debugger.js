"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDebugMiddlware = void 0;
const async_lock_1 = __importDefault(require("async-lock"));
const async_wait_until_1 = __importDefault(require("async-wait-until"));
const session_debug_map_1 = __importDefault(require("./session-debug-map"));
const asyncLock = new async_lock_1.default();
function getSessionIdFromUr(url) {
    const SESSION_ID_PATTERN = /\/session\/([^/]+)/;
    const match = SESSION_ID_PATTERN.exec(url);
    if (match) {
        return match[1];
    }
    return null;
}
function waitForSessionToResume(sessionId) {
    return __awaiter(this, void 0, void 0, function* () {
        yield asyncLock.acquire(`${sessionId}_debug`, () => __awaiter(this, void 0, void 0, function* () {
            yield (0, async_wait_until_1.default)(() => {
                var _a;
                return ((_a = session_debug_map_1.default.get(sessionId)) === null || _a === void 0 ? void 0 : _a.is_paused) == false;
            }, {
                timeout: 300000,
                intervalBetweenAttempts: 2000,
            });
        }));
    });
}
function isSessionPaused(sessionId) {
    var _a;
    return session_debug_map_1.default.get(sessionId) && ((_a = session_debug_map_1.default.get(sessionId)) === null || _a === void 0 ? void 0 : _a.is_paused) == true;
}
function handler(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        if (new RegExp(/wd-internal\//).test(req.url)) {
            req.url = req.originalUrl = req.url.replace("wd-internal/", "");
            return next();
        }
        else if (!!req.query.internal || new RegExp(/dashboard\//).test(req.url)) {
            return next();
        }
        let sessionId = getSessionIdFromUr(req.url);
        if (sessionId && isSessionPaused(sessionId)) {
            yield waitForSessionToResume(sessionId);
        }
        return next();
    });
}
function registerDebugMiddlware(expressApp) {
    let index = expressApp._router.stack.findIndex((s) => s.route);
    expressApp.use("/", handler);
    expressApp._router.stack.splice(index, 0, expressApp._router.stack.pop());
}
exports.registerDebugMiddlware = registerDebugMiddlware;
