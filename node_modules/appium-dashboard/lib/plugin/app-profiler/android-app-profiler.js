"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidAppProfiler = void 0;
const events_1 = __importDefault(require("events"));
const bluebird_1 = __importDefault(require("bluebird"));
const lodash_1 = __importDefault(require("lodash"));
const teen_process_1 = require("teen_process");
class AndroidAppProfiler extends events_1.default {
    constructor(opts = {}) {
        super();
        this.adb = opts.adb;
        this.logs = [];
        this.deviceUDID = opts.deviceUDID;
        this.appPackage = opts.appPackage;
    }
    startCapture() {
        return __awaiter(this, void 0, void 0, function* () {
            let started = false;
            return yield new bluebird_1.default((_resolve, _reject) => __awaiter(this, void 0, void 0, function* () {
                const resolve = function (...args) {
                    started = true;
                    _resolve(...args);
                };
                const reject = function (...args) {
                    started = true;
                    _reject(...args);
                };
                this.deviceInfo = yield this.getDeviceInfo();
                const cmd = [
                    ...this.adb.defaultArgs,
                    "-s",
                    this.deviceUDID,
                    "shell",
                    "top",
                    "-o",
                    "%CPU,RSS,ARGS",
                    "-s",
                    "1",
                    "-d",
                    "1",
                ];
                /* -m argument is only suppoted after api level 28 */
                if (lodash_1.default.isNumber(this.deviceInfo.api_level) && this.deviceInfo.api_level >= 28) {
                    cmd.push("-m", "20");
                }
                this.proc = new teen_process_1.SubProcess(this.adb.path, cmd);
                this.proc.on("exit", (code, signal) => {
                    this.proc = null;
                    if (!started) {
                        resolve();
                    }
                });
                this.proc.on("lines-stdout", (lines) => {
                    resolve();
                    if (!lines[3]) {
                        return;
                    }
                    let slicedLines = lines.slice(4);
                    let sysInfo = {
                        total_cpu_used: this.getSystemCpuUsage(lines[3]),
                        total_memory_used: this.getSystemMemoryUsage(lines[1]),
                        raw_cpu_log: lines[3],
                        raw_memory_log: lines[1],
                    };
                    /* Logs recieved is not in proper format so ignore the entry */
                    if (sysInfo.total_cpu_used == 0 && sysInfo.total_memory_used == 0) {
                        return;
                    }
                    for (let line of slicedLines) {
                        if (new RegExp(/\r/g).test(line)) {
                            line
                                .split(/\r/g)
                                .filter((l) => !!l)
                                .forEach((l) => this.outputHandler(sysInfo, lodash_1.default.trim(l)));
                        }
                        else {
                            this.outputHandler(sysInfo, lodash_1.default.trim(line));
                        }
                    }
                });
                yield this.proc.start(0);
            }));
        });
    }
    outputHandler(generalCpuInfo, output) {
        //remove all ascii chanracters from the log line
        output = output.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, "");
        let [cpu, memory, pkg] = output.split(" ");
        if (!output || pkg != this.appPackage) {
            return;
        }
        const outputObj = Object.assign({ timestamp: new Date().toISOString(), cpu,
            memory }, generalCpuInfo);
        this.logs.push(outputObj);
        this.emit("output", outputObj);
    }
    stopCapture() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.proc || !this.proc.isRunning) {
                this.proc = null;
                return;
            }
            this.proc.removeAllListeners("exit");
            yield this.proc.stop();
            this.proc = null;
        });
    }
    getLogs() {
        return lodash_1.default.uniqBy(this.logs, "timestamp");
    }
    getDeviceInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                total_cpu: yield this.getTotalCpus(),
                total_memory: yield this.getTotalMemory(),
                api_level: yield this.getAndroidApiLevel(),
            };
        });
    }
    getAndroidApiLevel() {
        return __awaiter(this, void 0, void 0, function* () {
            //"-m","20",
            const args = [...this.adb.defaultArgs, "-s", this.deviceUDID, "shell", "getprop", "ro.build.version.sdk"];
            let out = yield (0, teen_process_1.exec)(this.adb.path, args);
            return Number(out.stdout.trim());
        });
    }
    getTotalCpus() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const args = [...this.adb.defaultArgs, "-s", this.deviceUDID, "shell", "cat", "/proc/cpuinfo"];
            let out = yield (0, teen_process_1.exec)(this.adb.path, args);
            return (_a = out.stdout.match(/processor/g)) === null || _a === void 0 ? void 0 : _a.length;
        });
    }
    getTotalMemory() {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [...this.adb.defaultArgs, "-s", this.deviceUDID, "shell", "cat", "/proc/meminfo"];
            let out = yield (0, teen_process_1.exec)(this.adb.path, args);
            let match = out.stdout.match(/MemTotal:.*[0-9]/g);
            if (match && match.length) {
                return match[0].replace(/[^0-9]/g, "");
            }
            return 0;
        });
    }
    getSystemCpuUsage(logLine) {
        if (!logLine) {
            return;
        }
        let data = {};
        ["cpu", "idle"].forEach((type) => {
            let match = logLine.match(new RegExp(`([0-9]{0,})%${type}`));
            data[type] = match && match.length > 1 ? Number(match[1]) : 0;
        });
        let out = 0;
        ["user", "nice", "sys", "iow", "irq", "sirq", "host"].forEach((type) => {
            let match = logLine.match(new RegExp(`([0-9]{0,})%${type}`));
            out += match && match.length > 1 ? Number(match[1]) : 0;
        });
        return out > data["cpu"] ? data["cpu"] : out;
    }
    getSystemMemoryUsage(logLine) {
        if (!logLine) {
            return;
        }
        let match = logLine.match(new RegExp(/([0-9]{0,})k used/i));
        /* In some devices, memory will be shows in GB, so convert it back to KB */
        if (!match) {
            /* sample logLine "Mem:      5.5G total,      5.4G used,       71M free,       36M buffers" */
            match = logLine.match(new RegExp(/(([1-9]\d*)(\.\d+)?)G used/i));
            return match && match.length > 1 ? Math.ceil(parseFloat(match[1]) * 1024 * 1024) : 0;
        }
        return match && match.length > 1 ? Number(match[1]) : 0;
    }
}
exports.AndroidAppProfiler = AndroidAppProfiler;
