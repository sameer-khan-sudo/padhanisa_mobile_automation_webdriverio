"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandParser = void 0;
const locator_factory_1 = require("./locator-factory");
const plugin_utils_1 = require("./utils/plugin-utils");
class CommandParser {
    constructor(sessionInfo) {
        this.sessionInfo = sessionInfo;
    }
    isProxyRequest(args) {
        return args && args[0] && !!args[0].route;
    }
    /* Private methods  */
    getLocatorTitleInfo(elementId) {
        return __awaiter(this, void 0, void 0, function* () {
            let strategy = yield (0, locator_factory_1.getLocatorStrategy)(elementId);
            if (!strategy) {
                return "";
            }
            else if (strategy.index == null) {
                return `[${strategy.using}=${strategy.value}]`;
            }
            else {
                return `[${strategy.using}=${strategy.value}][${strategy.index}]`;
            }
        });
    }
    getElementCommandArgs(args) {
        if (this.isProxyRequest(args)) {
            return Object.values(args[0].params).reverse();
        }
        else {
            return args;
        }
    }
    isError(response) {
        return response && !!response.error;
    }
    getResponseObj(response) {
        let responseType = this.getResponseType(response);
        if (!responseType) {
            return null;
        }
        else {
            return {
                type: responseType,
                value: response,
            };
        }
    }
    getResponseType(response) {
        if (response == null) {
            return null;
        }
        else if (this.isError(response)) {
            return "error";
        }
        else if (Array.isArray(response) || typeof response === "object") {
            return "object";
        }
        else {
            return "string";
        }
    }
    getArgsBodyValue(args, key, index) {
        if (this.isProxyRequest(args)) {
            return args[0].body[key];
        }
        else {
            return args[index];
        }
    }
    getArgsParamsValue(args, key, index) {
        if (this.isProxyRequest(args)) {
            return args[0].params[key];
        }
        else {
            return args[index];
        }
    }
    constructCommandResponse(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let newArgs = [...config.args];
            if (this.isProxyRequest(config.args)) {
                newArgs = [...Object.values(config.args[0].body), config.args.pop()];
            }
            let title = null;
            if (config.titleInfoFormat) {
                title = yield config.titleInfoFormat(newArgs);
            }
            return {
                title: config.title,
                title_info: config.titleInfoFormat ? yield config.titleInfoFormat(newArgs) : null,
                response: config.responseFormat
                    ? this.getResponseObj(yield config.responseFormat(config.response))
                    : this.getResponseObj(config.response),
                params: config.paramsFormat ? this.getResponseObj(yield config.paramsFormat(newArgs)) : null,
            };
        });
    }
    /**
     * Command parser methods
     */
    //COMPLETED
    sessionTimedout(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "Session Timed out ",
                title_info: `Session inactive for ${args[0]} seconds`,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getStatus(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getStatus",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    createSession(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "CREATED NEW SESSION",
                title_info: response.session_id,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getSessions(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getSessions",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getSession(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getSession",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    deleteSession(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "CLIENT DELETED THE SESSION",
                title_info: args[0],
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getTimeouts(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Timeouts",
            });
        });
    }
    //COMPLETED
    timeouts(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Timeouts",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return `[${newArgs[0]}=${(0, plugin_utils_1.millisToMinutesAndSeconds)(newArgs[1] || 0)}]`;
                }),
            });
        });
    }
    //COMPLETED
    asyncScriptTimeout(driver, args, response) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Async script timeout",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return (0, plugin_utils_1.millisToMinutesAndSeconds)(newArgs[0] || 0);
                }),
            });
            if (((_a = res.response) === null || _a === void 0 ? void 0 : _a.type) != "error") {
                res.response = null;
            }
            return res;
        });
    }
    //COMPLETED
    implicitWait(driver, args, response) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Implicit wait",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return (0, plugin_utils_1.millisToMinutesAndSeconds)(newArgs[0] || 0);
                }),
            });
            if (((_a = res.response) === null || _a === void 0 ? void 0 : _a.type) != "error") {
                res.response = null;
            }
            return res;
        });
    }
    //COMPLETED
    getWindowHandle(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Window Handle",
            });
        });
    }
    //COMPLETED
    getWindowHandles(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Window Handles",
            });
        });
    }
    //COMPLETED
    getUrl(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get URL",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return newArgs[0];
                }),
                responseFormat: (response) => __awaiter(this, void 0, void 0, function* () {
                    return null;
                }),
            });
        });
    }
    //COMPLETED
    setUrl(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Navigate to url",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return newArgs[0]; }),
            });
        });
    }
    //COMPLETED
    forward(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Navigate forward",
            });
        });
    }
    //COMPLETED
    back(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Navigate Back",
            });
        });
    }
    //COMPLETED
    refresh(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Refresh page",
            });
        });
    }
    //COMPLETED
    execute(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Execute script",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () { return args[0]; }),
                paramsFormat: (args) => __awaiter(this, void 0, void 0, function* () {
                    return {
                        script: args[0],
                        args: args[1],
                    };
                }),
            });
        });
    }
    //COMPLETED
    executeAsync(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Execute asyncrounous script",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () { return args[0]; }),
                paramsFormat: (args) => __awaiter(this, void 0, void 0, function* () {
                    return {
                        script: args[0],
                        args: args[1],
                    };
                }),
            });
        });
    }
    //TODO
    getScreenshot(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getScreenshot",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    availableIMEEngines(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "availableIMEEngines",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getActiveIMEEngine(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getActiveIMEEngine",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    isIMEActivated(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "isIMEActivated",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    deactivateIMEEngine(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "deactivateIMEEngine",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    activateIMEEngine(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "activateIMEEngine",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    setFrame(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Frame",
                titleInfoFormat: (args) => args[0],
            });
        });
    }
    //COMPLETED
    setWindow(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Window",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () { return args[0]; }),
            });
        });
    }
    //COMPLETED
    closeWindow(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Close Window",
                titleInfoFormat: (args) => args[0],
            });
        });
    }
    //COMPLETED
    getWindowSize(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Window Size",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () { return args[0]; }),
            });
        });
    }
    //COMPLETED
    maximizeWindow(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Maximize Window",
            });
        });
    }
    //COMPLETED
    getCookies(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Cookies",
            });
        });
    }
    //COMPLETED
    setCookie(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Cookies",
            });
        });
    }
    //COMPLETED
    deleteCookies(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Delete Cookies",
            });
        });
    }
    //COMPLETED
    getCookie(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Cookies",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getArgsParamsValue(args, "name", 0); }),
            });
        });
    }
    //COMPLETED
    deleteCookie(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Delete Cookie",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getArgsParamsValue(args, "name", 0); }),
            });
        });
    }
    //COMPLETED
    getPageSource(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Page Source",
            });
        });
    }
    //COMPLETED
    title(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Title",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return newArgs[0]; }),
            });
        });
    }
    //COMPLETED
    findElement(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Find Element",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    if (!this.isError(response)) {
                        yield (0, locator_factory_1.saveLocator)({
                            using: newArgs[0],
                            value: newArgs[1],
                        }, [response]);
                    }
                    return `[${newArgs[0]}=${newArgs[1]}]`;
                }),
                paramsFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return {
                        using: newArgs[0],
                        value: newArgs[1],
                    };
                }),
            });
        });
    }
    //COMPLETED
    findElements(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Find Multiple Elements",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    if (!this.isError(response)) {
                        yield (0, locator_factory_1.saveLocator)({
                            using: newArgs[0],
                            value: newArgs[1],
                        }, response);
                    }
                    return `[${newArgs[0]}=${newArgs[1]}]`;
                }),
                paramsFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return {
                        using: newArgs[0],
                        value: newArgs[1],
                    };
                }),
            });
        });
    }
    //TODO
    active(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "active",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    findElementFromElement(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let parsedValue = yield this.findElement(driver, args, response);
            parsedValue.title = "Find element from element";
            return parsedValue;
        });
    }
    //COMPLETED
    findElementsFromElement(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let parsedValue = yield this.findElements(driver, args, response);
            parsedValue.title = "Find multiple elements from element";
            return parsedValue;
        });
    }
    //COMPLETED
    click(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let newArgs = this.getElementCommandArgs(args);
            return {
                title: "Click",
                title_info: yield this.getLocatorTitleInfo(newArgs[0]),
                response: this.getResponseObj(response),
                params: null,
            };
        });
    }
    //COMPLETED
    submit(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let newArgs = this.getElementCommandArgs(args);
            return {
                title: "Submit",
                title_info: yield this.getLocatorTitleInfo(newArgs[0]),
                response: this.getResponseObj(response),
                params: null,
            };
        });
    }
    //COMPLETED
    getText(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let newArgs = this.getElementCommandArgs(args);
            return {
                title: "Get text",
                title_info: yield this.getLocatorTitleInfo(newArgs[0]),
                response: this.getResponseObj(response),
                params: null,
            };
        });
    }
    //COMPLETED
    setValue(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 1);
            let text = this.getArgsBodyValue(args, "text", 0);
            return {
                title: "Send Keys",
                title_info: `${yield this.getLocatorTitleInfo(elementId)} [value=${text}]`,
                response: this.getResponseObj(response),
                params: this.getResponseObj({
                    text,
                }),
            };
        });
    }
    //COMPLETED
    keys(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Type Keys to active element",
                paramsFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return { text: newArgs[0] };
                }),
            });
        });
    }
    //TODO
    getName(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getName",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    clear(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let newArgs = this.getElementCommandArgs(args);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Clear",
                titleInfoFormat: () => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(newArgs[0]); }),
            });
        });
    }
    //COMPLETED
    elementSelected(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Is Element Selected",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(elementId); }),
            });
        });
    }
    //COMPLETED
    elementEnabled(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Is Element Enabled",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(elementId); }),
            });
        });
    }
    //COMPETED
    getAttribute(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get attribute",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(elementId); }),
            });
        });
    }
    //TODO
    equalsElement(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "equalsElement",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    elementDisplayed(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Is Element Displayed",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(elementId); }),
            });
        });
    }
    //COMPLETED
    getLocation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Element Location",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return yield this.getLocatorTitleInfo(this.getArgsParamsValue(args, "elementId", 0));
                }),
            });
        });
    }
    //TODO
    getLocationInView(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getLocationInView",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getSize(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Element Size",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(elementId); }),
            });
        });
    }
    //COMPLETED
    getCssProperty(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let elementId = this.getArgsParamsValue(args, "elementId", 1);
            let propertyName = this.getArgsParamsValue(args, "propertyName", 0);
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get CSS property",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return `[${this.getLocatorTitleInfo(elementId)}][property=${propertyName}]`; }),
            });
        });
    }
    //COMPLETED
    getOrientation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Orientation",
            });
        });
    }
    //COMPLETED
    setOrientation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Orientation",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return newArgs[0]; }),
            });
        });
    }
    //TODO
    getRotation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getRotation",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setRotation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setRotation",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    moveTo(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Move To Element",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () { return this.getLocatorTitleInfo(newArgs[0]); }),
            });
        });
    }
    //TODO
    clickCurrent(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "clickCurrent",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    buttonDown(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "buttonDown",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    buttonUp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "buttonUp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    doubleClick(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "doubleClick",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    touchDown(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "touchDown",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    touchUp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "touchUp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    touchMove(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "touchMove",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    performActions(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Perform actions",
                paramsFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return newArgs[0];
                }),
            });
        });
    }
    //TODO
    releaseActions(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "releaseActions",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    touchLongClick(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "touchLongClick",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    flick(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "flick",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getGeoLocation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getGeoLocation",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setGeoLocation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setGeoLocation",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getLog(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getLog",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getLogTypes(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getLogTypes",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getCurrentContext(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Current Context",
            });
        });
    }
    //COMPLETED
    setContext(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Context",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () {
                    return args[0];
                }),
            });
        });
    }
    //COMPLETED
    getContexts(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Available Contexts",
            });
        });
    }
    //TODO
    getPageIndex(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getPageIndex",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getNetworkConnection(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getNetworkConnection",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setNetworkConnection(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setNetworkConnection",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    performTouch(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "performTouch",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    performMultiAction(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "performMultiAction",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    receiveAsyncResponse(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "receiveAsyncResponse",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    mobileShake(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "mobileShake",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getDeviceTime(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getDeviceTime",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    lock(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "lock",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    unlock(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "unlock",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    isLocked(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "isLocked",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    startRecordingScreen(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "startRecordingScreen",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    stopRecordingScreen(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "stopRecordingScreen",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getPerformanceDataTypes(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getPerformanceDataTypes",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getPerformanceData(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getPerformanceData",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    pressKeyCode(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "pressKeyCode",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    longPressKeyCode(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "longPressKeyCode",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    fingerprint(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Use fingerprint",
                titleInfoFormat: (args) => __awaiter(this, void 0, void 0, function* () {
                    return args[0];
                }),
            });
        });
    }
    //TODO
    sendSMS(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "sendSMS",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    gsmCall(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "gsmCall",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    gsmSignal(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "gsmSignal",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    gsmVoice(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "gsmVoice",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    powerCapacity(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "powerCapacity",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    powerAC(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "powerAC",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    networkSpeed(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "networkSpeed",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    keyevent(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "keyevent",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    mobileRotation(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "mobileRotation",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getCurrentActivity(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getCurrentActivity",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getCurrentPackage(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getCurrentPackage",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    installApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "installApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    activateApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "activateApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    removeApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "removeApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    terminateApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "terminateApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    isAppInstalled(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "isAppInstalled",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    queryAppState(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "queryAppState",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    hideKeyboard(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Hide Keyboard",
            });
        });
    }
    //COMPLETED
    isKeyboardShown(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Is Keyboard displayed",
            });
        });
    }
    //TODO
    pushFile(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "pushFile",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    pullFile(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "pullFile",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    pullFolder(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "pullFolder",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    toggleFlightMode(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "toggleFlightMode",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    toggleData(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "toggleData",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    toggleWiFi(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "toggleWiFi",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    toggleLocationServices(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "toggleLocationServices",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    openNotifications(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "openNotifications",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    startActivity(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "startActivity",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getSystemBars(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getSystemBars",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getDisplayDensity(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getDisplayDensity",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    touchId(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "touchId",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    toggleEnrollTouchId(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "toggleEnrollTouchId",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    launchApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "launchApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    closeApp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "closeApp",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    reset(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Reset the application state",
            });
        });
    }
    //TODO
    background(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "background",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    endCoverage(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "endCoverage",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getStrings(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getStrings",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setValueImmediate(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setValueImmediate",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    replaceValue(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "replaceValue",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getSettings(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getSettings",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    updateSettings(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "updateSettings",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    executeDriverScript(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "executeDriverScript",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getLogEvents(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getLogEvents",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    logCustomEvent(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "logCustomEvent",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getAlertText(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Alert Text",
            });
        });
    }
    //TODO
    setAlertText(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setAlertText",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    postAcceptAlert(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "postAcceptAlert",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    postDismissAlert(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "postDismissAlert",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getElementRect(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Element Rect",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return yield this.getLocatorTitleInfo(this.getArgsParamsValue(args, "elementId", 0));
                }),
            });
        });
    }
    //TODO
    getElementScreenshot(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getElementScreenshot",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    getWindowRect(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Get Window Rect",
            });
        });
    }
    //COMPLETED
    setWindowRect(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Set Window Rect",
                titleInfoFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return `[x=${newArgs[0]},y=${newArgs[1]},width=${newArgs[2]},height=${newArgs[3]}]`;
                }),
            });
        });
    }
    //TODO
    minimizeWindow(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "minimizeWindow",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    fullScreenWindow(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "fullScreenWindow",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getProperty(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getProperty",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setClipboard(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setClipboard",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getClipboard(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getClipboard",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    compareImages(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "compareImages",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //COMPLETED
    executeCdp(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.constructCommandResponse({
                driver,
                args,
                response,
                title: "Execute CDP",
                paramsFormat: (newArgs) => __awaiter(this, void 0, void 0, function* () {
                    return {
                        command: newArgs[0],
                        params: newArgs[1],
                    };
                }),
            });
        });
    }
    //TODO
    addVirtualAuthenticator(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "addVirtualAuthenticator",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    removeVirtualAuthenticator(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "removeVirtualAuthenticator",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    addAuthCredential(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "addAuthCredential",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    getAuthCredential(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "getAuthCredential",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    removeAllAuthCredentials(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "removeAllAuthCredentials",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    removeAuthCredential(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "removeAuthCredential",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
    //TODO
    setUserAuthVerified(driver, args, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                title: "setUserAuthVerified",
                title_info: null,
                response: null,
                params: null,
            };
        });
    }
}
exports.CommandParser = CommandParser;
